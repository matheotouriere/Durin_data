---
# title: "TOMST_logger_data_cleaning"
# format: html
# editor: visual
# creator: TOURIERE Mathéo
# date: today
---

## Importing and filtering data

remove alla

```{r}
rm(list = ls(all.names = TRUE))
```

Installing all the packages required to run the code

```{r install packages}

#install.packages("tidyverse")
#install.packages("lubridate")
#install.packages("dataDownloader")
#install.packages("purrrlyr")
#install.packages("readxl")
#install.packages("fs")
#install.packages("purrr")
#install.packages("readr")
#install.packages("ggplot2")
#install.packages("lme4")
#install.packages("stargazer")
#install.packages("myClim")
```

Load all the packages needed

```{r load_packages}

library(tidyverse)
library(lubridate)
# library(dataDownloader)
library(purrrlyr)
library(readxl)
library(readr)
library(tidyverse)
library(fs)
library(purrr)
library(readr)
library(ggplot2)
library(lme4)
library(stargazer)
library(emmeans)
library(see)
library(svglite)
library(officer)
library(lmerTest)
library(officer)
library(myClim)
library(cowplot)
library(ggpubr)
```

### Importing metadata from the TOMST loggers files

```{r data import}
metadata <- read_delim("DURIN_TOSMT_2024_metadata.csv", delim = ";", escape_double = FALSE, trim_ws = TRUE, col_names=TRUE, col_types=c("c","c","n","c","c","c","c","c","n","n","D","D"))

# Trouver les colonnes "loggerID" et "plotID"
loggerIDColumn <- which(names(metadata) == "loggerID")
plotIDColumn <- which(names(metadata) == "plotID")

# Trier les données par ordre croissant selon la colonne "loggerID"
metadata <- metadata |> 
  arrange(metadata[, loggerIDColumn])

# Sélectionner un dossier à traiter
folder_path <- "D:/Utilisateurs/Touriere/Documents/GEN/4A/SIRD/Data/TOMST_loggers_data/DURIN_all"
#SO/Sogndal_31.05.2024"      


# Lister les fichiers dans le dossier
file_list <- list.files(folder_path)

# Créer un data frame pour stocker les chemins des fichiers, les localités et les formats de données
path_data <- data.frame(
  path = file.path(folder_path, file_list),
  
  loggerID  = as.integer(substr(file_list, 6, 13)), # Extraire les chiffres du nom du fichier
  data_format = "TOMST" # Définir le format de données comme "TOMST"
  )

# Créer un data frame pour stocker que les données utiles
active_metadata <- data.frame(loggerID = path_data$loggerID) |> 
   left_join(metadata, by = join_by(loggerID))
path_data <- path_data |> 
   mutate(locality_id=as.character(active_metadata$loggerID)) |> 
   mutate(serial_number=as.character(active_metadata$loggerID)) |> 
            select(path,locality_id,data_format,serial_number) #put colomn in the right ordre


localities_data <- data.frame(
    locality_id = as.character(active_metadata$loggerID),
    plot_id = active_metadata$plotID,
    site = active_metadata$site,
    habitat = active_metadata$land_type )
  
# Écrire les données dans un fichier csv
#write_csv(path_data, "chemin_vers_votre_dossier/Path.xlsx", row.names = FALSE)
#write_csv(localities_data, "chemin_vers_votre_dossier/Localities.xlsx", row.names = FALSE)

```

### Importing all the data

```{r}
tms <- mc_read_data(files_table = path_data,
                      localities_table = localities_data,
                      silent = TRUE, clean = TRUE)

#tms.verif <- tms |> 
#  mc_reshape_long()

#> Warning in mc_prep_clean(tms.m, silent = T): MyClim object is already cleaned.
#> Repeated cleaning overwrite cleaning informations.
tms.info1 <- mc_info_clean(tms) # call cleaning log

tms <- mc_join(tms)
tms.info2 <- mc_info_clean(tms)

```

### Cropping with myClim package and vector

```{r}

# Start and end are list 
#start <-  as.POSIXct(as.Date(active_metadata$date_in, format = "%d/%m/%Y"), tz = "UTC")
start_t <- as.POSIXct(as.Date("01/08/2023", format = "%d/%m/%Y"), tz = "UTC")
# we choose this date to have the same data for all TMS loggers
end_t <- as.POSIXct(as.Date("15/06/2024", format = "%d/%m/%Y"), tz = "UTC")
#end <- as.POSIXct(as.Date(active_metadata$date_collect, format = "%d/%m/%Y"), tz = "UTC")
localities = as.vector(names(tms$localities))


tms <- mc_prep_crop(tms, start = start_t, end = NULL, localities)
tms.info <- mc_info_clean(tms)



```

Cleaning data

```         
```

cropping to start reading at date_in (not efficient but works)

```{r cropping with a loop}

# Create an empty list to store the results of mc_prep_crop()
tms_crop <- vector("list", length(tms$localities))
tms_crop_t <- vector("list", 1)

#initialiasing my croping vectors
  start <- as.POSIXct(as.Date(active_metadata$date_in[1], format = "%d/%m/%Y"), tz = "UTC")
  end <- as.POSIXct(as.Date(active_metadata$date_collect[1], format = "%d/%m/%Y"), tz = "UTC")

 # Apply mc_prep_crop() and save the result in tms_crop[i].
  tms_crop_t <- mc_prep_crop(tms[1], start)

# For loop to apply mc_prep_crop() to each element of tms
for (i in 2:length(tms$localities)) {
  start <- as.POSIXct(as.Date(active_metadata$date_in[i], format = "%d/%m/%Y"), tz = "UTC")
  end <- as.POSIXct(as.Date(active_metadata$date_collect[i], format = "%d/%m/%Y"), tz = "UTC")

  
  tms_crop <- mc_prep_crop(tms[i], start)
  tms_crop_t <- mc_prep_merge(list(tms_crop_t,tms_crop))
}
tms <- tms_crop_t
rm(tms_crop,tms_crop_t)
tms.info <- mc_info_clean(tms) # call cleaning log
```

### filtering metadata by site: Lygra, Sogndal, Kautokeino, Senja

```{r filtering by site}

site <- list(unique(active_metadata$site))

#filtering to only have data from lygra
ly_metadata <- active_metadata |> 
  filter(site == "Lygra") 

ly_metadata <-list("all_serial" = ly_metadata$loggerID,
                "Open"=filter(ly_metadata,land_type == "Open")$loggerID,
              "Forested"=filter(ly_metadata,land_type == "Forested")$loggerID,
           "DroughtNet"=filter(ly_metadata,land_type == "DroughtNet")$loggerID)
  
#filtering to only have data from sogndal
so_metadata <- active_metadata |> 
  filter(site == "Sogndal") 

so_metadata <-list("all_serial"=so_metadata$loggerID,
                "Open"=filter(so_metadata,land_type == "Open")$loggerID,
              "Forested"=filter(so_metadata,land_type == "Forested")$loggerID)
  
#filtering to only have data from Senja
se_metadata <- active_metadata |> 
  filter(site == "Senja") 

se_metadata <-list("all_serial"=se_metadata$loggerID,
                "Open"=filter(se_metadata,land_type == "Open")$loggerID,
              "Forested"=filter(se_metadata,land_type == "Forested")$loggerID)
 
#filtering to only have data from Kautokeino
ka_metadata <- active_metadata |> 
  filter(site == "Kautokeino") 

ka_metadata <-list("all_serial"=ka_metadata$loggerID,
                "Open"=filter(ka_metadata,land_type == "Open")$loggerID,
              "Forested"=filter(ka_metadata,land_type == "Forested")$loggerID)
```

### filtering data by habitat : open vs forested (or DroughNet) for each site

```{r Data from lygra}
#filtering data for lygra
if(length(unique(ly_metadata$all_serial))!=0)
{
tms.ly  <- tms |> 
  mc_filter( localities = ly_metadata$all_serial, reverse = F)
}

if(length(unique(ly_metadata$Open))!=0) 
{
tms.ly.open <- tms |> 
  mc_filter( localities = ly_metadata$Open, reverse = F)
}
if(length(unique(ly_metadata$Forested))!=0) 
{
tms.ly.forested <- tms |> 
  mc_filter( localities = ly_metadata$Forested, reverse = F)
}
if(length(unique(ly_metadata$DroughtNet))!=0) 
{
tms.ly.DroughtNet <- tms |> 
  mc_filter( localities = ly_metadata$DroughtNet, reverse = F)

tms.ly.DroughtNet.90 <- tms |> 
  mc_filter( localities = ly_metadata$DroughtNet, reverse = F) |> 
  mc_filter(localities = filter(active_metadata, drt_treatment == "90")$loggerID)

tms.ly.DroughtNet.0 <- tms |> 
  mc_filter( localities = ly_metadata$DroughtNet, reverse = F) |> 
  mc_filter(localities = filter(active_metadata, drt_treatment == "0")$loggerID)
}

#filtering data from Sogndal
if(length(unique(so_metadata$all_serial))!=0)
{
tms.so  <- tms |> 
  mc_filter( localities = so_metadata$all_serial, reverse = F)
}
if(length(unique(so_metadata$Open))!=0) 
{
tms.so.open <- tms |> 
  mc_filter( localities = so_metadata$Open, reverse = F)
}
if(length(unique(so_metadata$Forested))!=0) 
{
tms.so.forested <- tms |> 
  mc_filter( localities = so_metadata$Forested, reverse = F)
}

#filtering data for Senja
if(length(unique(se_metadata$all_serial))!=0)
{
tms.se  <- tms |> 
  mc_filter( localities = se_metadata$all_serial, reverse = F)
}

if(length(unique(se_metadata$Open))!=0) 
{
tms.se.open <- tms |> 
  mc_filter( localities = se_metadata$Open, reverse = F)
}
if(length(unique(se_metadata$Forested))!=0) 
{
tms.se.forested <- tms |> 
  mc_filter( localities = se_metadata$Forested, reverse = F)
}

#filtering data for Kautokeino
if(length(unique(ka_metadata$all_serial))!=0)
{
tms.ka  <- tms |> 
  mc_filter( localities = ka_metadata$all_serial, reverse = F)
}

if(length(unique(ka_metadata$Open))!=0) 
{
tms.ka.open <- tms |> 
  mc_filter( localities = ka_metadata$Open, reverse = F)
}
if(length(unique(ka_metadata$Forested))!=0) 
{
tms.ka.forested <- tms |> 
  mc_filter( localities = ka_metadata$Forested, reverse = F)
}
```

## Data testing code

Extracting data by sensor types

```{r}
tms.TMS_T1 <- tms |> 
  mc_reshape_long() |> 
  filter(sensor_name == "TMS_T1")

tms.TMS_T2 <- tms |> 
  mc_reshape_long() |> 
  filter(sensor_name == "TMS_T2")

tms.TMS_T3 <- tms |> 
  mc_reshape_long() |> 
  filter(sensor_name == "TMS_T3")

tms.TMS_moist <- tms |> 
  mc_reshape_long() |> 
  filter(sensor_name == "TMS_moist")

# aggregate with your custom function. (how many records are below -20°C per month)
tms.all.custom <- mc_agg(tms, fun = list(TMS_T1 = "below20"), period = "month",                             min_coverage = 0.1,
                         custom_functions = list(below20 = function(x){length(x[x<(-20)])}))
r_T1 <- mc_reshape_long(tms.all.custom) 

tms.all.custom <- mc_agg(tms, fun = list(TMS_T2 = "below20"), period = "month",                             min_coverage = 0.1,
                         custom_functions = list(below20 = function(x){length(x[x<(-20)])}))
r_T2 <- mc_reshape_long(tms.all.custom) 

tms.all.custom <- mc_agg(tms, fun = list(TMS_T3 = "below20"), period = "month",                             min_coverage = 0.1,
                         custom_functions = list(below20 = function(x){length(x[x<(-20)])}))
r_T3 <- mc_reshape_long(tms.all.custom) 

tms.all.custom <- mc_agg(tms, fun = list(TMS_moist = "over_range"), period = "month",                             min_coverage = 0.1,
                         custom_functions = list(over_range = function(x){length(x[x>(3600)])}))
r_moist <- mc_reshape_long(tms.all.custom) 
```

Aggregation

```{r}
  # with defaults only convert Raw-format  to Agg-format
  tms.ag <- mc_agg(tms,fun = NULL, period = NULL)
  tms.ag.verif <- tms.ag |> 
  mc_reshape_long()

# aggregate to daily mean, range, coverage, and 95 percentile. 
tms.day <- mc_agg(tms, fun = c("mean", "range", "coverage", "percentile"),
                percentiles = 95, period = "day", min_coverage = 0.95)
tms.day.verif <- tms.day |> 
  mc_reshape_long()

# aggregate all time-series, return one value per sensor.
tms.all <- mc_agg(tms, fun = c("mean", "range", "coverage", "percentile"),
                percentiles = 95, period = "all", min_coverage = 0.95)
tms.all.verif <- tms.all |> 
  mc_reshape_long()

# aggregate with your custom function. (how many records are below -5°C per month)
tms.all.custom <- mc_agg(tms, fun = list(TMS_T3 = "below5"), period = "month",                              min_coverage = 0.5,
                         custom_functions = list(below5 = function(x){length(x[x<(-5)])}))
r <- mc_reshape_long(tms.all.custom)
```

Calculation

```{r}
tms.out <- tms# <- mc_filter(tms, localities = "94195243", reverse = F) #keep one locality

## calculate virtual sensor VWC from raw TMS moisture signal
tms.calc <- mc_calc_vwc(tms.out, soiltype = "universal") #reseach on soiltype and TOMST VERSION

## virtual sensor with growing and freezing degree days
tms.calc <- mc_calc_gdd(tms.calc, sensor = "TMS_T3",)
tms.calc <- mc_calc_fdd(tms.calc, sensor = "TMS_T3")

## virtual sensor to estimate snow presence from 2 cm air temperature 
tms.calc <- mc_calc_snow(tms.calc, sensor = "TMS_T2")

## summary data.frame of snow estimation
tms.snow <- mc_calc_snow_agg(tms.calc)

```

add snow days number

```{r}
tms.snow$locality_id = as.numeric(tms.snow$locality_id)
tms.snow.metada <- active_metadata |>
  rename(locality_id = loggerID) |>
  left_join(tms.snow, by =join_by(locality_id))
tms.snow.number <- tms.snow.metada |> 
  group_by(plotID) |> 
  summarise(mean_snow_day = sd(snow_days))
```

MyClim environmental variables

```{r}
temp_env  <- mc_env_temp(tms, period = "month", min_coverage = 0.9,)
moist_env <- mc_env_moist(tms.calc, period = "month", min_coverage = 0.9)
```

list to data frame

```{r}
## wide table of air temperature and soil moisture
tms.wide <- mc_reshape_wide(tms.calc, sensors = c("TMS_T3", "vwc"))

## long table of air temperature and soil moisture
tms.long <- mc_reshape_long(tms.calc, sensors = c("TMS_T3", "vwc"))

tms.long.all <- mc_reshape_long(tms.all)
```

Plotting

```{r}
## lines
tms.plot <- mc_filter(tms, localities = "94194601")

p <- mc_plot_line(tms.plot, sensors = c("TMS_T3", "TMS_T1", "TMS_moist"))
p <- p+ggplot2::scale_x_datetime(date_breaks = "1 week", date_labels = "%W")
p <- p+ggplot2::xlab("week")
p <- p+ggplot2::aes(size = sensor_name)
p <- p+ggplot2::scale_size_manual(values = c(1, 1 ,2))
p <- p+ggplot2::guides(size = "none")
p <- p+ggplot2::scale_color_manual(values = c("hotpink", "pink", "darkblue"), name = NULL)

## raster
mc_plot_raster(tms, sensors = c("TMS_moist"))
```

## Data extraction

## ALL

```{r calculation for all the sites}

## calculate virtual sensor VWC from raw TMS moisture signal
tms.all.calc <- mc_calc_vwc(tms, soiltype = "universal") #reseach on soiltype and TOMST VERSION

## virtual sensor with growing and freezing degree days
tms.all.calc <- mc_calc_gdd(tms.all.calc, sensor = "TMS_T3",)
tms.all.calc <- mc_calc_fdd(tms.all.calc, sensor = "TMS_T3")

## virtual sensor to estimate snow presence from 2 cm air temperature 
tms.all.calc <- mc_calc_snow(tms.all.calc, sensor = "TMS_T2")

## summary data.frame of snow estimation
tms.snow <- tms.all.calc |> 
  mc_calc_snow_agg() 
tms.snow$locality_id = as.numeric(tms.snow$locality_id)
tms.snow <- active_metadata |> 
  select("locality_id" = loggerID , "siteID" = site,"habitat" = land_type) |> 
  filter(habitat %in% c("Open", "Forested")) |> 
  left_join(tms.snow) |> 
  group_by(siteID, habitat) |> 
  summarise(mean_snow_days = mean(snow_days),
            first_day = mean.Date(first_day, na.rm = TRUE),
            last_day = mean.Date(last_day, na.rm = TRUE))
 
temp_env_all  <-tms |> 
  mc_env_temp(period = "week", min_coverage = 0.9) |> 
  filter(value >= -30 & value <= 50)

moist_env_all <- mc_env_moist(tms.all.calc, period = "week", min_coverage = 0.9)
snow_all <- tms.all.calc |> 
    mc_reshape_long() |> 
  filter(sensor_name == "snow")

```

Plot comparison

```{r}
active_metadata$site <- factor(active_metadata$site, levels = c("Kautokeino", "Senja", "Sogndal", "Lygra"))

temp.soil.mean.all <- temp_env_all |> 
  filter(sensor_name == "T.soil_8_cm.mean") |> #T.air_15_cm.mean
    select("loggerID" = locality_id, sensor_name, datetime, "temp_mean_soil" = value) 
temp.soil.mean.all$loggerID = as.numeric(temp.soil.mean.all$loggerID)


temp.soil.mean.all <- active_metadata |> 
  select(loggerID, site, "habitat" = land_type) |> 
  left_join(temp.soil.mean.all) |> 
  filter(habitat %in% c("Open", "Forested")) |> 
  group_by(site, datetime) |>
  #group_by(site, datetime) |>
  summarise(mean.temp.soil = mean(temp_mean_soil, na.rm = TRUE)) |>  
  ungroup()

temp.soil.mean.all.hab <- temp_env_all |> 
  filter(sensor_name == "T.soil_8_cm.mean") |> #T.air_15_cm.mean
    select("loggerID" = locality_id, sensor_name, datetime, "temp_mean_soil" = value) 
temp.soil.mean.all.hab$loggerID = as.numeric(temp.soil.mean.all.hab$loggerID)

temp.soil.mean.all.hab <- active_metadata |> 
  select(loggerID, site, "habitat" = land_type) |> 
  left_join(temp.soil.mean.all.hab) |> 
  filter(habitat %in% c("Open", "Forested")) |> 
  group_by(site, habitat, datetime) |>
  #group_by(site, datetime) |>
  summarise(mean.temp.soil.hab = mean(temp_mean_soil, na.rm = TRUE)) |>  
  ungroup()
  # mutate(mean.temp.hab = replace(mean.temp.hab, is.nan(mean.temp.hab), -10)) 



temp.mean.all <- temp_env_all |> 
  filter(sensor_name == "T.air_15_cm.mean") |> 
    select("loggerID" = locality_id, sensor_name, datetime, "temp_mean_air" = value) 
temp.mean.all$loggerID = as.numeric(temp.mean.all$loggerID)

temp.mean.all <- active_metadata |> 
  select(loggerID, site, "habitat" = land_type) |> 
  left_join(temp.mean.all) |> 
  filter(habitat %in% c("Open", "Forested")) |> 
  group_by(site, datetime) |>
  #group_by(site, datetime) |>
  summarise(mean.temp.air = mean(temp_mean_air, na.rm = TRUE)) |>  
  ungroup()

temp.mean.all.hab <- temp_env_all |> 
  filter(sensor_name == "T.air_15_cm.mean") |> #T.air_15_cm.mean
    select("loggerID" = locality_id, sensor_name, datetime, "temp_mean_air" = value) 
temp.mean.all.hab$loggerID = as.numeric(temp.mean.all.hab$loggerID)

temp.mean.all.hab <- active_metadata |> 
  select(loggerID, site, "habitat" = land_type) |> 
  left_join(temp.mean.all.hab) |> 
  filter(habitat %in% c("Open", "Forested")) |> 
  group_by(site, habitat, datetime) |>
  #group_by(site, datetime) |>
  summarise(mean.temp.air.hab = mean(temp_mean_air, na.rm = TRUE)) |>  
  ungroup()
  # mutate(mean.temp.hab = replace(mean.temp.hab, is.nan(mean.temp.hab), -10)) 



moist.mean.all <- moist_env_all |> 
  filter(sensor_name == "VWC.soil_0_15_cm.mean") |> 
  select("loggerID" = locality_id, sensor_name, datetime, "moist_mean" = value) 
moist.mean.all$loggerID = as.numeric(moist.mean.all$loggerID) 
moist.mean.all <- moist.mean.all|> 
  left_join(temp.soil.mean.all) |> 
  mutate(moist_mean = if_else(mean.temp.soil < 1, NA, moist_mean))

moist.mean.all <- active_metadata |> 
  select(loggerID, site, "habitat" = land_type) |> 
  left_join(moist.mean.all) |> 
  filter(habitat %in% c("Open", "Forested")) |> 
  group_by(site, datetime) |> 
  #group_by(site, datetime) |> 
  summarise(mean.moist = mean(moist_mean, na.rm = TRUE)) |> 
  ungroup()# |> 


moist.mean.all.hab <- moist_env_all |> 
  filter(sensor_name == "VWC.soil_0_15_cm.mean") |> 
  select("loggerID" = locality_id, sensor_name, datetime, "moist_mean" = value) 
moist.mean.all.hab$loggerID = as.numeric(moist.mean.all.hab$loggerID)
moist.mean.all.hab <- moist.mean.all.hab|> 
  left_join(temp.soil.mean.all.hab) |> 
  mutate(moist_mean = if_else(mean.temp.soil.hab < 1, NA, moist_mean))

moist.mean.all.hab <- active_metadata |> 
  select(loggerID, site, "habitat" = land_type) |> 
  left_join(moist.mean.all.hab) |> 
  filter(habitat %in% c("Open", "Forested")) |> 
  group_by(site, habitat, datetime) |> 
  #group_by(site, datetime) |> 
  summarise(mean.moist.hab = mean(moist_mean, na.rm = TRUE)) |> 
  ungroup()# |> 
   #mutate(mean.moist.hab = replace(mean.moist.hab, is.nan(mean.moist.hab), 0)) 



# Plot the data
f_line_macro_1 <-ggplot(moist.mean.all, aes(x = datetime, y = mean.moist, color = site)) +
  geom_line()+
  labs(#title = "Average Soil Moisture Over Time",
       x = "Date",
       y = "Weekly Average Soil Volumetric Water Content",
       color = "Site") +
  theme(
    axis.title.x = element_text(size = 14), 
    axis.title.y = element_text(size = 14), 
    axis.text.x = element_text(size = 12), 
    axis.text.y = element_text(size = 12), 
    plot.subtitle = element_text(size = 14),
    plot.caption = element_text(size = 14),
    legend.text = element_text(size = 12)
  ) +
   theme(legend.position = "bottom")

print(f_line_macro_1)

f_line_macro_2 <-ggplot(temp.mean.all, aes(x = datetime, y = mean.temp.air, color = site)) +
  geom_line()+
  labs(#title = "Average air temperature Over Time",
       x = "Date",
       y = "Weekly Average Air (15cm) Temperature (°C)",
       color = "Site")+
  theme(
    axis.title.x = element_text(size = 14), 
    axis.title.y = element_text(size = 14), 
    axis.text.x = element_text(size = 12), 
    axis.text.y = element_text(size = 12), 
    plot.subtitle = element_text(size = 14),
    plot.caption = element_text(size = 14),
    legend.text = element_text(size = 12)
  ) +
   theme(legend.position = "bottom")

print(f_line_macro_2)

 plot_grid(f_line_macro_1, f_line_macro_2, ncol = 1)
 
 f_line_micro_1 <-ggplot(moist.mean.all.hab, aes(x = datetime, y = mean.moist.hab, color = habitat)) +
  geom_line() +
  facet_wrap(~ site) +
  labs(#title = "Average Soil Moisture Over Time",
       x = "Date",
       y = "Weekly Average Soil Solumetric Water Sontent",
       color = "Habitat")+
   theme(legend.position = "bottom")+
  theme(
    axis.title.x = element_text(size = 14), 
    axis.title.y = element_text(size = 14), 
    axis.text.x = element_text(size = 12), 
    axis.text.y = element_text(size = 12), 
    plot.subtitle = element_text(size = 14),
    plot.caption = element_text(size = 14),
    legend.text = element_text(size = 12)
  ) +
   theme(legend.position = "bottom")

print(f_line_micro_1)

f_line_micro_2 <-ggplot(temp.mean.all.hab, aes(x = datetime, y = mean.temp.air.hab, color = habitat)) +
  geom_line() +
  facet_wrap(~ site) +
  labs(#title = "Average air temperature Over Time",
       x = "Date",
       y = "Weekly Average Air (15cm) Temperature (°C)",
       color = "Habitat")+
   theme(legend.position = "bottom")+
  theme(
    axis.title.x = element_text(size = 14), 
    axis.title.y = element_text(size = 14), 
    axis.text.x = element_text(size = 12), 
    axis.text.y = element_text(size = 12), 
    plot.subtitle = element_text(size = 14),
    plot.caption = element_text(size = 14),
    legend.text = element_text(size = 12)
  ) 

print(f_line_micro_2)

 plot_grid(f_line_micro_1, f_line_micro_2, ncol = 1)

snow.mean.all <- snow_all |> 
  select("loggerID" = locality_id, sensor_name, datetime, "snow" = value) 
snow.mean.all$loggerID = as.numeric(snow.mean.all$loggerID)

snow.mean.all <- active_metadata |> 
  select(loggerID, site, "habitat" = land_type) |> 
  left_join(snow.mean.all) |> 
  filter(habitat %in% c("Open", "Forested")) |> 
  group_by(site, datetime) |> 
  summarise(snow.hab = mean(snow, na.rm = TRUE)) |> 
  ungroup() 


f_line_micro_3 <-ggplot(snow.mean.all, aes(x = datetime, y = snow.hab))+
  geom_line() +
  facet_wrap(~ site) +
  labs(#title = "Average air temperature Over Time",
       x = "Date",
       y = "snow cover")+
  theme(
    axis.title.x = element_text(size = 14), 
    axis.title.y = element_text(size = 14), 
    axis.text.x = element_text(size = 12), 
    axis.text.y = element_text(size = 12), 
    plot.subtitle = element_text(size = 14),
    plot.caption = element_text(size = 14),
    legend.text = element_text(size = 12)
  ) 

print(f_line_micro_3)


GDD5.mean.all <- temp_env_all |> 
  filter(sensor_name == "T.air_2_cm.GDD5") |>  # T.soil_8_cm.GDD5
    select("loggerID" = locality_id, sensor_name, datetime, "GDD5_mean" = value) 
GDD5.mean.all$loggerID = as.numeric(GDD5.mean.all$loggerID)

GDD5.mean.all <- active_metadata |> 
  select(loggerID, site, "habitat" = land_type) |> 
  left_join(GDD5.mean.all) |> 
  filter(habitat %in% c("Open", "Forested")) |> 
  group_by(site, datetime) |> 
  summarise(GDD5.hab = mean(GDD5_mean, na.rm = TRUE)) |> 
  ungroup() |> 
  mutate(GDD5_day = ifelse(GDD5.hab > 0, 1, 0))

GDD5.month.all <- GDD5.mean.all |> 
  mutate(month_year = format(datetime, "%Y-%m")) |> 
  group_by(site, month_year) |> 
  summarise(GDD5_day_month = sum(GDD5_day, na.rm = TRUE))

FDD0.mean.all <- temp_env_all |> 
  filter(sensor_name == "T.soil_8_cm.FDD0") |> 
    select("loggerID" = locality_id, sensor_name, datetime, "FDD0_mean" = value) 
FDD0.mean.all$loggerID = as.numeric(FDD0.mean.all$loggerID)

FDD0.mean.all <- active_metadata |> 
  select(loggerID, site, "habitat" = land_type) |> 
  left_join(FDD0.mean.all) |> 
  filter(habitat %in% c("Open", "Forested")) |> 
  group_by(site, datetime) |> 
  summarise(FDD0.hab = mean(FDD0_mean, na.rm = TRUE)) |> 
  ungroup() |> 
  mutate(FDD0_day = ifelse(FDD0.hab > 0, 1, 0)) 

FDD0.month.all <- FDD0.mean.all |> 
  mutate(month_year = format(datetime, "%Y-%m")) |> 
  group_by(site, month_year) |> 
  summarise(FDD0_day_month = sum(FDD0_day, na.rm = TRUE))

DD.mean.all <- GDD5.mean.all |> 
  left_join(FDD0.mean.all, by = join_by(site, datetime)) |> 
  mutate(GDD5_day = ifelse(FDD0_day == 0, 1, 0)) |> 
  mutate(month_year = format(datetime, "%Y-%m")) |> 
  group_by(site, month_year) |> 
  summarise(FDD0_day_month = sum(FDD0_day, na.rm = TRUE),
            GDD5_day_month = sum(GDD5_day, na.rm = TRUE))

snow.month.all <- snow.mean.all |> 
  mutate(month_year_day = format(datetime, "%Y-%m-%d")) |> 
  group_by(site, month_year_day) |> 
  summarise(snow.day = sum(snow.hab, na.rm = TRUE)) |> 
  ungroup() |> 
  mutate(snow.day = ifelse(snow.day < 0.5, 0, 1)) |> 
  mutate(month_year = as.character(substr(month_year_day, 1, 7))) |> 
  group_by(site, month_year) |> 
  summarise(snow.day.month = sum(snow.day, na.rm = TRUE)) |> 
  ungroup()

snow.year <- snow.month.all |> 
  group_by(site) |> 
  summarise(snow.year = sum(snow.day.month, na.rm = TRUE))
 
f_line_micro_4 <- ggplot() +
  geom_line(data = GDD5.mean.all, aes(x = datetime, y = GDD5.hab, color = "Growing Degree Day (>5°C)")) +
  geom_line(data = FDD0.mean.all, aes(x = datetime, y = FDD0.hab, color = "Freezing Degree Day (<0°C)")) +
  facet_wrap(~ site) +
  labs(
    #title = "Average air temperature Over Time",
    x = "Date",
    y = "Sum of temperature (°C)",
    color = " "#Sum of temperature (°C)"
  ) +
  theme(legend.position = "bottom")+
  scale_color_manual(
    values = c("Growing Degree Day (>5°C)" = "green", "Freezing Degree Day (<0°C)" = "blue")
  )+
  theme(
    axis.title.x = element_text(size = 14), 
    axis.title.y = element_text(size = 14), 
    axis.text.x = element_text(size = 12), 
    axis.text.y = element_text(size = 12), 
    plot.subtitle = element_text(size = 14),
    plot.caption = element_text(size = 14),
    legend.text = element_text(size = 12)
  ) 

print(f_line_micro_4)


f_histo_micro <- ggplot() +
   geom_bar(data = DD.mean.all, 
           aes(x = month_year, y = FDD0_day_month, fill = "Freezing Day (<0°C)"),
           stat = "identity") +
  geom_bar(data = DD.mean.all, 
           aes(x = month_year, y = GDD5_day_month, fill = "Growing Day (>5°C)"),
           stat = "identity") +
 
  facet_wrap(~ site) +
  labs(
    x = "Date",
    y = "Number of day",
    fill = " Day Type"
  ) +
  theme(
    legend.position = "bottom",
    axis.text.x = element_text(angle = 45, hjust = 1),
    position = "dodge"
  )+
  scale_fill_manual(
    values = c("Growing Day (>5°C)" = "green", "Freezing Day (<0°C)" = "blue")
  ) +
  theme(
    axis.title.x = element_text(size = 14), 
    axis.title.y = element_text(size = 14), 
    axis.text.x = element_text(size = 12), 
    axis.text.y = element_text(size = 12), 
    plot.subtitle = element_text(size = 14),
    plot.caption = element_text(size = 14),
    legend.text = element_text(size = 12)
  ) 



print(f_histo_micro)

# Add a type column to both dataframes
GDD5.mean.all$type <- "Growing Degree Day (>5°C)"
FDD0.mean.all$type <- "Freezing Degree Day (<0°C)"

# Combine both datasets without creating a new combined dataframe
f_line_micro_5 <- ggplot() +
  geom_line(data = GDD5.mean.all, aes(x = datetime, y = GDD5.hab, color = site)) +
  geom_line(data = FDD0.mean.all, aes(x = datetime, y = FDD0.hab, color = site)) +
  facet_grid(type ~ ., scales = "free", labeller = labeller(type = c(
    "Growing Degree Day (>5°C)" = "Growing Degree Day (>5°C)",
    "Freezing Degree Day (<0°C)" = "Freezing Degree Day (<0°C)"
  ))) +
  labs(
    x = "Date",
    y = "Sum of temperature (°C)",
    color = "Site"
  )+
  theme(
    axis.title.x = element_text(size = 14), 
    axis.title.y = element_text(size = 14), 
    axis.text.x = element_text(size = 12), 
    axis.text.y = element_text(size = 12), 
    plot.subtitle = element_text(size = 14),
    plot.caption = element_text(size = 14),
    legend.text = element_text(size = 12)
  ) 

print(f_line_micro_5)

fig_save <- "D:/Utilisateurs/Touriere/Documents/GEN/4A/SIRD/Rapport/Images/R"

join_macro <- ggarrange(
  f_line_macro_1, f_line_macro_2,
  labels = c("a)", "b)"),
  ncol = 1,
  nrow = 2,
  common.legend = TRUE,
  font.label = list(size = 17, face = "bold")
) 

join_macro

ggsave(filename = paste0(fig_save, "/macro_comp.png"), plot = join_macro, width = 10, height = 12, units = "in", dpi = 300)

join_micro <- ggarrange(
  f_line_micro_1, f_line_micro_2,
  labels = c("a)", "b)"),
  ncol = 1,
  nrow = 2,
  common.legend = TRUE,
  font.label = list(size = 17, face = "bold")
) 

join_micro

ggsave(filename = paste0(fig_save, "/micro_comp.png"), plot = join_micro, width = 10, height = 12, units = "in", dpi = 300)
```

## Lygra

```{r calculation for all the data}
   
## calculate virtual sensor VWC from raw TMS moisture signal
tms.ly.calc <- mc_calc_vwc(tms.ly, soiltype = "universal") #reseach on soiltype and TOMST VERSION

## virtual sensor with growing and freezing degree days
tms.ly.calc <- mc_calc_gdd(tms.ly.calc, sensor = "TMS_T3",)
tms.ly.calc <- mc_calc_fdd(tms.ly.calc, sensor = "TMS_T3")

## virtual sensor to estimate snow presence from 2 cm air temperature 
tms.ly.calc <- mc_calc_snow(tms.ly.calc, sensor = "TMS_T2")

## summary data.frame of snow estimation
tms.snow <- mc_calc_snow_agg(tms.ly.calc)
 
temp_env  <- mc_env_temp(tms.ly, period = "month", min_coverage = 0.9)
moist_env <- mc_env_moist(tms.ly.calc, period = "month", min_coverage = 0.9)


```

```{r calculation for the open habitat}
#mean moisture
moist.mean.ly.open <- tms.ly.open |> 
   mc_calc_vwc( soiltype = "universal") |> 
   mc_env_moist(period = "day", min_coverage = 0.9) |> 
  filter(sensor_name == "VWC.soil_0_15_cm.mean") |> 
  pivot_wider(
    id_cols = c(datetime, sensor_name),
    names_from = locality_id,
    values_from = value)

moist.mean.ly.open <-  mutate(moist.mean.ly.open,
                              avg_value = rowMeans(select(moist.mean.ly.open, -datetime, -sensor_name), na.rm = TRUE))

# #min moisture  (not significant)
# moist.min.ly.open <- tms.ly.open |> 
#    mc_calc_vwc( soiltype = "universal") |> 
#    mc_env_moist(period = "day", min_coverage = 0.9) |> 
#   filter(sensor_name == "VWC.soil_0_15_cm.5p") |> 
#   pivot_wider(
#     id_cols = c(datetime, sensor_name),
#     names_from = locality_id,
#     values_from = value)
# 
# moist.min.ly.open <-  mutate(moist.min.ly.open,
#                              avg_value = rowMeans(select(moist.min.ly.open, -datetime, -sensor_name), na.rm = TRUE))


#mean temperature at 15cm
temp.mean.ly.open <- tms.ly.open |> 
   mc_env_temp(period = "day", min_coverage = 0.9) |> 
  filter(sensor_name == "T.air_15_cm.mean") |> 
  pivot_wider(
    id_cols = c(datetime, sensor_name),
    names_from = locality_id,
    values_from = value)

temp.mean.ly.open <-  mutate(temp.mean.ly.open,
                              avg_value = rowMeans(select(temp.mean.ly.open, -datetime, -sensor_name), na.rm = TRUE))

#mean gdd number
gdd.mean.ly.open <- tms.ly.open |> 
   mc_env_temp(period = "month", min_coverage = 0.9) |> 
  filter(sensor_name == "T.soil_8_cm.GDD5") |> 
  pivot_wider(
    id_cols = c(datetime, sensor_name),
    names_from = locality_id,
    values_from = value)
gdd.mean.ly.open <-  mutate(gdd.mean.ly.open,
                              avg_value = rowMeans(select(gdd.mean.ly.open, -datetime, -sensor_name), na.rm = TRUE))

#mean frost days number
fdd.mean.ly.open <- tms.ly.open |> 
   mc_env_temp(period = "month", min_coverage = 0.9) |> 
  filter(sensor_name == "T.soil_8_cm.FDD0") |> 
  pivot_wider(
    id_cols = c(datetime, sensor_name),
    names_from = locality_id,
    values_from = value)
fdd.mean.ly.open <-  mutate(fdd.mean.ly.open,
                              avg_value = rowMeans(select(fdd.mean.ly.open, -datetime, -sensor_name), na.rm = TRUE))

```

```{r calculation for the forested habitat}

#mean moisture
moist.mean.ly.forested <- tms.ly.forested |> 
   mc_calc_vwc( soiltype = "universal") |> 
   mc_env_moist(period = "day", min_coverage = 0.9) |> 
  filter(sensor_name == "VWC.soil_0_15_cm.mean") |> 
  pivot_wider(
    id_cols = c(datetime, sensor_name),
    names_from = locality_id,
    values_from = value)

moist.mean.ly.forested <-  mutate(moist.mean.ly.forested,avg_value = rowMeans(select(moist.mean.ly.forested, -datetime, -sensor_name), na.rm = TRUE))


#mean temperature at 15cm
temp.mean.ly.forested <- tms.ly.forested |> 
   mc_env_temp(period = "day", min_coverage = 0.9) |> 
  filter(sensor_name == "T.air_15_cm.mean") |> 
  pivot_wider(
    id_cols = c(datetime, sensor_name),
    names_from = locality_id,
    values_from = value)

temp.mean.ly.forested <-  mutate(temp.mean.ly.forested,
                              avg_value = rowMeans(select(temp.mean.ly.forested, -datetime, -sensor_name), na.rm = TRUE))
  

#mean gdd number
gdd.mean.ly.forested <- tms.ly.forested |> 
   mc_env_temp(period = "month", min_coverage = 0.9) |> 
  filter(sensor_name == "T.soil_8_cm.GDD5") |> 
  pivot_wider(
    id_cols = c(datetime, sensor_name),
    names_from = locality_id,
    values_from = value)
gdd.mean.ly.forested <-  mutate(gdd.mean.ly.forested,
                              avg_value = rowMeans(select(gdd.mean.ly.forested, -datetime, -sensor_name), na.rm = TRUE))

#mean frost days number
fdd.mean.ly.forested <- tms.ly.forested |> 
   mc_env_temp(period = "month", min_coverage = 0.9) |> 
  filter(sensor_name == "T.soil_8_cm.FDD0") |> 
  pivot_wider(
    id_cols = c(datetime, sensor_name),
    names_from = locality_id,
    values_from = value)
fdd.mean.ly.forested <-  mutate(fdd.mean.ly.forested,
                              avg_value = rowMeans(select(fdd.mean.ly.forested, -datetime, -sensor_name), na.rm = TRUE))

```

```{r calculation for the droughnet plots}

#mean moisture
moist.mean.ly.DN.90 <- tms.ly.DroughtNet.90 |> 
   mc_calc_vwc( soiltype = "universal") |> 
   mc_env_moist(period = "day", min_coverage = 0.9) |> 
  filter(sensor_name == "VWC.soil_0_15_cm.mean") |> 
  pivot_wider(
    id_cols = c(datetime, sensor_name),
    names_from = locality_id,
    values_from = value)

moist.mean.ly.DN.90 <-  mutate(moist.mean.ly.DN.90,avg_value = rowMeans(select(moist.mean.ly.DN.90, -datetime, -sensor_name), na.rm = TRUE))


#mean temperature at 15cm
temp.mean.ly.DN.90 <- tms.ly.DroughtNet.90 |> 
   mc_env_temp(period = "day", min_coverage = 0.9) |> 
  filter(sensor_name == "T.air_15_cm.mean") |> 
  pivot_wider(
    id_cols = c(datetime, sensor_name),
    names_from = locality_id,
    values_from = value)

temp.mean.ly.DN.90 <-  mutate(temp.mean.ly.DN.90,
                              avg_value = rowMeans(select(temp.mean.ly.DN.90, -datetime, -sensor_name), na.rm = TRUE))
  
#mean gdd number
gdd.mean.ly.DN.90 <- tms.ly.DroughtNet.90 |> 
   mc_env_temp(period = "month", min_coverage = 0.9) |> 
  filter(sensor_name == "T.soil_8_cm.GDD5") |> 
  pivot_wider(
    id_cols = c(datetime, sensor_name),
    names_from = locality_id,
    values_from = value)
gdd.mean.ly.DN.90 <-  mutate(gdd.mean.ly.DN.90,
                              avg_value = rowMeans(select(gdd.mean.ly.DN.90, -datetime, -sensor_name), na.rm = TRUE))

#mean frost days number
fdd.mean.ly.DN.90 <- tms.ly.DroughtNet.90 |> 
   mc_env_temp(period = "month", min_coverage = 0.9) |> 
  filter(sensor_name == "T.soil_8_cm.FDD0") |> 
  pivot_wider(
    id_cols = c(datetime, sensor_name),
    names_from = locality_id,
    values_from = value)
fdd.mean.ly.DN.90 <-  mutate(fdd.mean.ly.DN.90,
                              avg_value = rowMeans(select(fdd.mean.ly.DN.90, -datetime, -sensor_name), na.rm = TRUE))

```

## Microclimat analysis for Lygra

### Plot for the comparison

```{r moisture plots}

p.moist.1 <- ggplot() +
  geom_line(data = moist.mean.ly.open, aes(x = datetime, y = avg_value), color = "blue") +

  geom_line(data = moist.mean.ly.forested, aes(x = datetime, y = avg_value), color = "red") +
    geom_line(data = moist.mean.ly.DN.90, aes(x = datetime, y = avg_value), color = "green") +
  
  labs(title = " Microclimatic omparison", x = "Time", y = "Moist") +
  theme(legend.position = c(x = 0.99, y = 0.01),
    legend.justification = c(x = "right", y = "bottom"))

p.moist.2 <- ggplot() +
  geom_line(data = moist.mean.ly.open, aes(x = datetime, y = avg_value, color = "Open habitat")) +
  geom_line(data = moist.mean.ly.forested, aes(x = datetime, y = avg_value, color = "Forested habitat")) +
    geom_line(data = moist.mean.ly.DN.90, aes(x = datetime, y = avg_value, color = "DroughtNet 90%")) +
  labs(title = "Graphique en ligne du temps vs valeur", x = "Temps", y = "Valeur", color = "Habitat Type") +
  scale_color_manual(values = c("Open habitat" = "blue", "Forested habitat" = "red","DroughtNet 90%" = "green")) +
  
  theme(plot.title = element_text(hjust = 0.5))

p.moist.1
p.moist.2
```

```{r temperature plots}

p.temp.1 <- ggplot() +
  geom_line(data = temp.mean.ly.open, aes(x = datetime, y = avg_value), color = "blue") +

  geom_line(data = temp.mean.ly.forested, aes(x = datetime, y = avg_value), color = "red") +
  geom_line(data = temp.mean.ly.DN.90, aes(x = datetime, y = avg_value), color = "green") +
  
  labs(title = " Microclimatic comparison", x = "Time", y = "Temperature") +
  theme(legend.position = c(x = 0.99, y = 0.01),
    legend.justification = c(x = "right", y = "bottom"))

p.temp.1
```

```{r growing days}
p.gdd.1 <- ggplot() +
  geom_line(data = gdd.mean.ly.open, aes(x = datetime, y = avg_value), color = "blue") +

  geom_line(data = gdd.mean.ly.forested, aes(x = datetime, y = avg_value), color = "red") +
  geom_line(data = gdd.mean.ly.DN.90, aes(x = datetime, y = avg_value), color = "green") +
  
  labs(title = " Microclimatic comparison", x = "Time", y = "Temperature") +
  theme(legend.position = c(x = 0.99, y = 0.01),
    legend.justification = c(x = "right", y = "bottom"))

p.gdd.1

```

```{r Freezing degree days}
p.fdd.1 <- ggplot() +
  geom_line(data = fdd.mean.ly.open, aes(x = datetime, y = avg_value), color = "blue") +

  geom_line(data = fdd.mean.ly.forested, aes(x = datetime, y = avg_value), color = "red") +
  geom_line(data = fdd.mean.ly.DN.90, aes(x = datetime, y = avg_value), color = "green") +
  
  labs(title = " Microclimatic comparison", x = "Time", y = "Temperature") +
  theme(legend.position = c(x = 0.99, y = 0.01),
    legend.justification = c(x = "right", y = "bottom"))

p.fdd.1
```

```{r combining graph}

# Assembler les graphiques dans une seule image avec cowplot
combined_plot <- plot_grid(p.moist.1, p.temp.1, p.gdd.1, p.fdd.1, ncol = 2, labels = "AUTO")

# Ajouter une légende commune (exemple avec une légende fictive)
legend <- get_legend(p.moist.2 + theme_minimal())

final_plot <- cowplot::plot_grid(
  combined_plot,
  legend,
  nrow = 1,
  rel_widths = c(1, 0.2)
)

# Afficher le résultat
final_plot

```

## Macroclimat analysis (between sites)

```{r}
#PCA ??
```

---
#title: "Hydraulics Traits data cleaning"
#format: html
#editor: visual
#author : Mathéo TOURIERE
#date : Today
---

## Data Import

```{r include: FALSE}
rm(list = ls())



library(tidyverse)
library(ggplot2)
library(readxl)
library(readr)
#library("here")
library(tidyr)
library(dplyr)
library(pvcurveanalysis)
library(googlesheets4)
library(imager)
library(jsonlite)
library(myClim)


#local import (without internet)
#field_data <-  read.csv(file = here("Fieldwork_spreadsheet.csv"),dec = ",")

```

importing data from google sheet

```{r importing directly from google sheet if internet}

# Authentification 
gs4_auth()

#URL google sheet
sheet_PV_url <- "https://docs.google.com/spreadsheets/d/1NXFZCGgbadWr4-rOg-YzXA_Oogk4Kti_uWWhwoU-knc/edit?gid=1002499086#gid=1002499086" #Pv data
sheet_SP_url <- "https://docs.google.com/spreadsheets/d/1S2ruGvcPbTalryl_l5ROC57WxArjDPjvbv6DEaFjq6g/edit?gid=1277829208#gid=1277829208"  #Stomatal data

sheet_leaf_url <- "https://docs.google.com/spreadsheets/d/1EqU78hhb4Wz3RC8UMinqQU4T99QZ7FaDTXUW8krT_OU/edit?gid=0#gid=0"

# Read
PV_data <- read_sheet(sheet_PV_url)
SP_data <- read_sheet(sheet_SP_url, sheet = "Stomatal density")
cond_data <- read_sheet(sheet_SP_url, sheet = "Conductance")
cond_data$collection_time <- cond_data$collection_time |> 
  as.POSIXct(format="%Y-%m-%d %H:%M:%S") |> 
  format(format="%H:%M:%S")
# Read
leaf_trait_data <-  suppressWarnings(read_sheet(sheet_leaf_url, sheet = "Data", 
                              col_types = "cdcdccccccccddcccccdddcdddddddddccccDcccc"))

```

importing TOMST loggers data

```{r}
metadata <- read_delim("TOMST_Loggers/DURIN_TOSMT_2024_metadata.csv", delim = ";", escape_double = FALSE, trim_ws = TRUE, col_names=TRUE, col_types=c("c","c","n","c","c","c","c","c","n","n","D","D"))
metadata$plotID = toupper(metadata$plotID)

# Trouver les colonnes "loggerID" et "plotID"
loggerIDColumn <- which(names(metadata) == "loggerID")
plotIDColumn <- which(names(metadata) == "plotID")

# Trier les données par ordre croissant selon la colonne "loggerID"
metadata <- metadata |> 
  arrange(metadata[, loggerIDColumn])

# Sélectionner un dossier à traiter
folder_path <- "C:/Users/Touriere/Desktop/GEN/4A/SIRD/Data/TOMST_loggers_data/DURIN_all"
#SO/Sogndal_31.05.2024"      


# Lister les fichiers dans le dossier
file_list <- list.files(folder_path)

# Créer un data frame pour stocker les chemins des fichiers, les localités et les formats de données
path_data <- data.frame(
  path = file.path(folder_path, file_list),
  
  loggerID  = as.integer(substr(file_list, 6, 13)), # Extraire les chiffres du nom du fichier
  data_format = "TOMST" # Définir le format de données comme "TOMST"
  )

TOMST_data <- SP_data |> 
  select(plant_id, "plotID" = Nearest_plotID) |> 
  filter(!is.na(plotID))

TOMST_data <- metadata |> 
  select(site, "habitat" = land_type, plotID, loggerID) |> 
  semi_join(TOMST_data, by = "plotID") |> 
  left_join(TOMST_data)


path_data <- TOMST_data |> 
  left_join(path_data) |> 
  mutate(serial_number = loggerID) |> 
  select(path, "locality_id" = loggerID ,data_format, serial_number) #put colomn in the right ordre


localities_data <- data.frame(
    locality_id = as.character(TOMST_data$loggerID),
    plot_id = TOMST_data$plotID,
    site = TOMST_data$site,
    habitat = TOMST_data$habitat)

tms <- mc_read_data(files_table = path_data,
                      localities_table = localities_data,
                      silent = TRUE, clean = TRUE)
tms <- mc_join(tms)

tms_info <- mc_info_clean(tms)
tms_info$start_date = tms_info$end_date %m-% months(2)
#tms_info$start_date = tms_info$end_date %m-% months(12)

# Start and end are list 
#start <-  as.POSIXct(as.Date(active_metadata$date_in, format = "%d/%m/%Y"), tz = "UTC")
start_t <- tms_info$start_date
# we choose this date to have the same data for all TMS loggers

localities = as.vector(names(tms$localities))

tms <- mc_prep_crop(tms, start = start_t, end = NULL, localities)
tms.info <- mc_info_clean(tms)

tms.all.calc <- mc_calc_vwc(tms, soiltype = "universal") #reseach on soiltype and TOMST VERSION
temp_env_all  <-tms |> 
  mc_env_temp(period = "day", min_coverage = 0.1) |> 
  filter(value >= -30 & value <= 50)
temp_env_all$locality_id = as.numeric(temp_env_all$locality_id)

moist_env_all <- mc_env_moist(tms.all.calc, period = "day", min_coverage = 0.1)
moist_env_all$locality_id = as.numeric(moist_env_all$locality_id)

VWC.soil_0_15_cm.mean <- moist_env_all |> 
  filter(sensor_name == "VWC.soil_0_15_cm.mean") |> 
  group_by(locality_id) |> 
  summarise(VWC.soil_0_15_cm.mean = mean(value, na.rm = TRUE)) |> 
  ungroup() |> 
  select("loggerID" = locality_id, VWC.soil_0_15_cm.mean) 

VWC.soil_0_15_cm.sd <- moist_env_all |> 
  filter(sensor_name == "VWC.soil_0_15_cm.sd") |> 
  group_by(locality_id) |> 
  summarise(VWC.soil_0_15_cm.sd = mean(value, na.rm = TRUE)) |> 
  ungroup() |> 
  select("loggerID" = locality_id, VWC.soil_0_15_cm.sd) 

T.soil_8_cm.mean <- temp_env_all |> 
  filter(sensor_name == "T.soil_8_cm.mean") |> 
  group_by(locality_id) |> 
  summarise(T.soil_8_cm.mean = mean(value, na.rm = TRUE)) |> 
  ungroup() |> 
  select("loggerID" = locality_id, T.soil_8_cm.mean) 

T.soil_8_cm.drange <- temp_env_all |> 
  filter(sensor_name == "T.soil_8_cm.drange") |>
  group_by(locality_id) |> 
  summarise(T.soil_8_cm.drange = mean(value, na.rm = TRUE)) |> 
  ungroup() |> 
  select("loggerID" = locality_id, T.soil_8_cm.drange) 

T.soil_8_cm.frostdays <- temp_env_all |> 
  filter(sensor_name == "T.soil_8_cm.frostdays") |> 
  group_by(locality_id) |> 
  summarise(T.soil_8_cm.frostdays = sum(value, na.rm = TRUE)) |> 
  ungroup() |> 
  select("loggerID" = locality_id, T.soil_8_cm.frostdays)

T.air_2_cm.mean <- temp_env_all |> 
  filter(sensor_name == "T.air_2_cm.mean") |>
  group_by(locality_id) |> 
  summarise(T.air_2_cm.mean = mean(value, na.rm = TRUE)) |> 
  ungroup() |> 
  select("loggerID" = locality_id, T.air_2_cm.mean)

T.air_2_cm.drange <- temp_env_all |> 
  filter(sensor_name == "T.air_2_cm.drange") |>
  group_by(locality_id) |> 
  summarise(T.air_2_cm.drange = mean(value, na.rm = TRUE)) |> 
  ungroup() |> 
  select("loggerID" = locality_id, T.air_2_cm.drange) 

T.air_2_cm.frostdays <- temp_env_all |> 
  filter(sensor_name == "T.air_2_cm.frostdays") |> 
  group_by(locality_id) |> 
  summarise(T.air_2_cm.frostdays = sum(value, na.rm = TRUE)) |> 
  ungroup() |> 
  select("loggerID" = locality_id, T.air_2_cm.frostdays)

T.air_15_cm.mean <- temp_env_all |> 
  filter(sensor_name == "T.air_15_cm.mean") |> 
  group_by(locality_id) |> 
  summarise(T.air_15_cm.mean = mean(value, na.rm = TRUE)) |> 
  ungroup() |> 
  select("loggerID" = locality_id, T.air_15_cm.mean)

T.air_15_cm.drange <- temp_env_all |> 
  filter(sensor_name == "T.air_15_cm.drange") |> 
  group_by(locality_id) |> 
  summarise(T.air_15_cm.drange = mean(value, na.rm = TRUE)) |> 
  ungroup() |> 
  select("loggerID" = locality_id, T.air_15_cm.drange)

TOMST_data <- TOMST_data |>
  left_join(VWC.soil_0_15_cm.mean, by = "loggerID") |>
  left_join(VWC.soil_0_15_cm.sd, by = "loggerID") |>
  left_join(T.soil_8_cm.mean, by = "loggerID") |>
  left_join(T.soil_8_cm.drange, by = "loggerID") |>
  left_join(T.soil_8_cm.frostdays, by = "loggerID") |>
  left_join(T.air_2_cm.mean, by = "loggerID") |>
  left_join(T.air_2_cm.frostdays, by = "loggerID") |>
  left_join(T.air_2_cm.drange, by = "loggerID") |>
  left_join(T.air_15_cm.mean, by = "loggerID") |>
  left_join(T.air_15_cm.drange, by = "loggerID") |> 
  rename(siteID = site)
```

## Stomatal analysis

```{r}
rm(list = setdiff(ls(), c("PV_data", "SP_data", "cond_data","leaf_trait_data", "TOMST_data")))
```

Calculation of the stomatal traits

```{r calculation of the stomatal area}

# Loading annotations 
#annotations <- fromJSON("D:/Utilisateurs/Touriere/Téléchargements/DURIN_SP_area.v10i.coco-segmentation/train/_annotations.coco.json")

#annotations <- fromJSON("C:/Users/Touriere/Desktop/GEN/4A/SIRD/Data/Stomatal_peels/DURIN_SP_area.v17i.coco/_annotations.coco.json")

annotations <- fromJSON("C:/Users/Touriere/Desktop/GEN/4A/SIRD/Data/Stomatal_peels/DURIN_SP_area_relabel.v2i.coco/_annotations.coco.json")

annotations_df <- as.data.frame(annotations$annotations)
images_df <- as.data.frame(annotations$images)
images_df$file_name <- gsub("-", ".", images_df$file_name)

images_df_DN <-  subset(images_df, grepl("DN", file_name))|> 
    mutate(photo_id = substr(file_name, 1, 18)) |> 
    mutate(plant_id = substr(file_name, 1, 12))

images_df <- subset(images_df, !grepl("DN", file_name))|>
    mutate(photo_id = substr(file_name, 1, 14)) |> 
    mutate(plant_id = substr(file_name, 1, 8)) 
#  rbind(images_df_DN)


categories_df <- as.data.frame(annotations$categories)

#calculation for open and forested
annotations_df_OF <- merge(annotations_df, images_df, by.x = "image_id", by.y = "id")
annotations_df_OF <- merge(annotations_df_OF, categories_df, by.x = "category_id", by.y = "id")  |> 
  select(category_id, image_id, id, area, plant_id, photo_id, "classe_name" = name) |> 
  mutate(species = substr(photo_id, 6, 7))

#calculation for DN
annotations_df_DN <- merge(annotations_df, images_df_DN, by.x = "image_id", by.y = "id")
annotations_df_DN <- merge(annotations_df_DN, categories_df, by.x = "category_id", by.y = "id") |> 
  select(category_id, image_id, id, area, plant_id, photo_id, "classe_name" = name) |> 
  mutate(species = substr(photo_id, 10, 11))

annotations_df <- rbind(annotations_df_OF, annotations_df_DN)

# Filter for target class
target_annotations <- annotations_df |> 
  filter(classe_name == "DURIN-stomatal-peels_VM_pol")

area_correction_annotations <- annotations_df |> 
  filter(classe_name == "area_correction") |> 
  group_by(image_id) |> 
  summarise(area_correction = sum(area)) |>
  ungroup() 

optique_info <- annotations_df |> 
  filter(classe_name == "Optique") |> 
  mutate(area_mm2 = 0.07068583471) |> 
  mutate(conversion_factor = area_mm2 / area) |> 
  left_join(area_correction_annotations, by = "image_id")|> 
  mutate(area_correction = replace(area_correction, is.na(area_correction), 0)) |> 
  #mutate(area_correction_mm2 = (area_mm2 - area_correction*conversion_factor)) #not working because the area is not calculate in the same way for two objects differents
  mutate(area_correction_mm2 = 0.07068583471)
  
target_annotations<- target_annotations |> 
  merge(select(optique_info, image_id, conversion_factor, area_correction_mm2))


#calculation of the stomatal density for all the pictures
  #loop for extracting the stomatal count
SP_data_photo_id <- data.frame()
for (i in 1:3)
{
for (j in 1:3)
{
SP_data_photo_id <- SP_data|> 
  select(plant_id, paste0("stomatal_peels_S",i,"_P",j)) |> 
  mutate(photo_id = paste0(plant_id, "_S",i,"_P",j), leaf_id = paste0(plant_id, "_S",i)) |> 
    rename(stomatal_count = starts_with("stomatal_peels_S")) |>
  rbind(SP_data_photo_id)
}
}

#filtering
picture_delete = c("LY_F_VV1_S1_P3", "LY_DN_3.3_VV1_S2_P2", "SE_F_VV3_S3_P2", "SO_O_VV3_S1_P1", "LY_F_VV3_S2_P1", "LY_F_VV3_S2_P2", "LY_F_VV3_S3_P1", "LY_O_VV1_S2_P1", "LY_O_VV1_S2_P3", "LY_O_VV2_S1_P1", "LY_O_VV2_S1_P2", "LY_O_VV2_S1_P3", "LY_O_VV2_S3_P2", "LY_O_VV3_S1_P1", "LY_O_VV3_S1_P2", "LY_O_VV3_S2_P1", "LY_O_VV3_S2_P2", "LY_F_VV3_S2_P1", "LY_F_VV3_S2_P3", "LY_F_VM1_S1_P1", "LY_F_VM1_S3_P3")

#cleaning
SP_data_photo_id <- SP_data_photo_id |> 
  filter(!(photo_id %in% picture_delete))



  #calculation of the densities
SP_data_density <- optique_info|>
  select(photo_id, species, area_correction_mm2) |> 
  left_join(SP_data_photo_id, by = "photo_id") |> 
  select(plant_id, photo_id, leaf_id, species, area_correction_mm2, stomatal_count) |> 
  mutate(stomatal_density_p = stomatal_count / area_correction_mm2)

  #adding metadatas 
 SP_data_density <- SP_data |>
  select(plant_id, siteID, habitat, DroughtNet_Plot, DroughtTrt) |> 
  left_join(SP_data_density, by = "plant_id") |> 
  mutate(habitat = if_else(is.na(habitat), DroughtTrt, habitat)) |> 
  select(-DroughtNet_Plot, -DroughtTrt)

  #calculation of the mean density for all the leaves
leaf_id_density_mean <- SP_data_density |> 
  group_by(leaf_id) |> 
  summarise(leaf_mean_stomatal_density = mean(stomatal_density_p,  na.rm = TRUE),
            leaf_sd_stomatal_density = sd(stomatal_density_p,  na.rm = TRUE)) |>
  mutate(variation = leaf_sd_stomatal_density / leaf_mean_stomatal_density*100) |> 
  ungroup()

 
   #calculation of the mean density for all the plant
plant_id_density_mean <- SP_data_density |> 
  group_by(plant_id) |> 
  summarise(mean_stomatal_density = mean(stomatal_density_p,  na.rm = TRUE),
            sd_stomatal_density = sd(stomatal_density_p,  na.rm = TRUE)) |>
 ungroup() |> 
  left_join(SP_data_density, by = "plant_id") |> 
  distinct(plant_id, .keep_all = TRUE) |> 
  select( plant_id, siteID, species, mean_stomatal_density, sd_stomatal_density)  #mean of the size for all the pictures for one plant 



#calculation of the mean and the sd of the stomatal density
habitat_density_mean<- SP_data_density|> 
  group_by(siteID, habitat, species) |> 
  summarise(mean_stomatal_density = mean(stomatal_density_p,  na.rm = TRUE),
            sd_stomatal_density = sd(stomatal_density_p,  na.rm = TRUE)) |>
  ungroup()




# Filtrer les données avec variation > 25%
filtered_data <- leaf_id_density_mean %>% filter(variation > 25)


# Création d'une copie de SP_data_density pour le nettoyage
SP_data_density_clean <- SP_data_density |> 
  group_by()

# Liste des leaf_id uniques à traiter
leaf_filtered_id <- unique(filtered_data$leaf_id)

# Boucle pour chaque leaf_filtered_id
for (leaf_id_loop in leaf_filtered_id) {
  # Obtenir les données correspondantes dans SP_data_density
  sp_data <- filter(SP_data_density_clean, SP_data_density_clean$leaf_id == leaf_id_loop)
  
    mean_values <- sp_data$stomatal_density_p
    diffs <- abs(mean_values - mean(mean_values))
    
    # Identifier l'index de la mesure la plus éloignée
    max_diff_index <- which.max(diffs)
    photo_id_clean <- sp_data$photo_id[max_diff_index]
    
    # Supprimer cette mesure de SP_data_density_clean
    SP_data_density_clean <- SP_data_density_clean[-(which(SP_data_density_clean$photo_id == photo_id_clean)), ]
  
}

# Recalculer les moyennes et variations pour le dataset nettoyé
leaf_id_density_mean_clean <- SP_data_density_clean %>%
  group_by(leaf_id) %>%
  summarise(
    leaf_mean_stomatal_density = mean(stomatal_density_p,  na.rm = TRUE),
    leaf_sd_stomatal_density = sd(stomatal_density_p,  na.rm = TRUE),
    variation = (leaf_sd_stomatal_density / leaf_mean_stomatal_density) * 100
  )
```

Area calculation

```{r}

#calculation of the stomatal area
stomata_surface <- target_annotations |> 
  mutate(area_mm2 = area * conversion_factor) |> 
  group_by(image_id) |> 
  summarise(mean_stomatal_area_mm2_p = mean(area_mm2)) |>
  mutate(mean_stomatal_area_um2_p = mean_stomatal_area_mm2_p*10^6) |> #calculation of the mean for one picture 
  ungroup() |> 
  left_join(distinct(target_annotations,image_id, .keep_all = TRUE), by = "image_id") |> 
  select(plant_id, species, photo_id, mean_stomatal_area_mm2_p, mean_stomatal_area_um2_p) |>  
  left_join(select(distinct(SP_data_density, plant_id, .keep_all = TRUE), plant_id, siteID, habitat), by = "plant_id") #mean of all the stomatas present on the picture


plant_id_stomata_surface <- stomata_surface|>
  group_by(plant_id) |> 
  summarise(mean_stomatal_area_um2 = mean(mean_stomatal_area_um2_p,  na.rm = TRUE),
            sd_area_um2 = sd(mean_stomatal_area_um2_p,  na.rm = TRUE)) |> 
  ungroup() |> 
  left_join(stomata_surface, by = "plant_id") |> 
  distinct(plant_id, .keep_all = TRUE) |> 
  select( plant_id, siteID, species, mean_stomatal_area_um2, sd_area_um2)  #mean of the size for all the pictures for one plant 

#calculation of the mean and the sd of the stomatal surface
habitat_stomata_surface<- stomata_surface|> 
  group_by(siteID, habitat, species) |> 
  summarise(mean_stomatal_area_um2 = mean(mean_stomatal_area_um2_p,  na.rm = TRUE),
            sd_area_um2 = sd(mean_stomatal_area_um2_p,  na.rm = TRUE)) |>
  ungroup()

#adding the plant_id mean to the initial data frame
SP_data <- SP_data |>
  left_join(select(plant_id_density_mean,plant_id, mean_stomatal_density), by = "plant_id") |> 
  left_join(select(plant_id_stomata_surface, plant_id, mean_stomatal_area_um2), by = "plant_id")


stomatal_errorbar <- SP_data_density |> 
group_by(species, siteID, habitat) |> 
  summarize(mean_stomatal_density = mean(stomatal_density_p, na.rm = TRUE),
            sd_stomatal_density = sd(stomatal_density_p, na.rm = TRUE)) |> 
  ungroup()

#adding error bar for error plot
stomatal_errorbar <- stomata_surface |> 
group_by(species, siteID, habitat) |> 
  summarize(mean_stomatal_area = mean(mean_stomatal_area_um2_p, na.rm = TRUE),
            sd_stomatal_area = sd(mean_stomatal_area_um2_p, na.rm = TRUE)) |> 
  ungroup() |> 
  left_join(stomatal_errorbar, by = join_by(species, siteID, habitat))
            

SP_data_density <- SP_data_density |> 
  left_join(stomatal_errorbar, by = join_by(siteID, species, habitat)) |>
  mutate(stomatal_density_mean = mean_stomatal_density,
         stomatal_density_min = mean_stomatal_density - sd_stomatal_density,
         stomatal_density_max = mean_stomatal_density + sd_stomatal_density) |> 
  select(-sd_stomatal_density,  -sd_stomatal_area)

SP_data_area <- stomata_surface |> 
  left_join(stomatal_errorbar, by = join_by(siteID, species, habitat)) |>
  mutate(stomatal_area_min = mean_stomatal_area - sd_stomatal_area,
         stomatal_area_max = mean_stomatal_area + sd_stomatal_area) |> 
  select(-sd_stomatal_density, -sd_stomatal_area)


SP_data_picture <- SP_data_density |>
  left_join(SP_data_area)
```

Conductance analysis

```{r}

cond_data <- cond_data |> 
    mutate(stomatal_conductance_mean_p = rowMeans(select(cond_data,
                                          stomatal_conductance_1, stomatal_conductance_2, stomatal_conductance_3),
           na.rm = TRUE)) |> 
  mutate(stomatal_conductance_sd_p = apply(select(cond_data,
                                          stomatal_conductance_1, stomatal_conductance_2, stomatal_conductance_3), 1, sd, na.rm = TRUE)) |> 
  mutate(stomatal_conductance_variation = stomatal_conductance_sd_p / stomatal_conductance_mean_p * 100)

stomatal_conductance_mean <- cond_data |> 
group_by(species, siteID, habitat) |> 
  summarize(mean_conductance = mean(stomatal_conductance_mean_p, na.rm = TRUE),
            sd_conductance = sd(stomatal_conductance_mean_p, na.rm = TRUE)) |> 
  ungroup()

cond_data<- cond_data |> 
  left_join(stomatal_conductance_mean, by = join_by(siteID, species, habitat)) |>
  mutate(stomatal_conductance_min = mean_conductance - sd_conductance,
         stomatal_conductance_max = mean_conductance + sd_conductance)

cond_data_r <- cond_data |>
  rename(species_full = species) |> 
  mutate(species = case_when(
    species_full == "Vaccinium vitis-idaea" ~ "VV",
    species_full == "Vaccinium myrtillus" ~ "VM",
    TRUE ~ NA_character_  # pour toutes les autres espèces, mettre NA
  )) |> 
  select(species, DroughtTrt, DroughtNet_plot, Nearest_plotID, starts_with("stomatal_conductance")) |> 
   mutate(cond_code = case_when(
    !is.na(Nearest_plotID) ~ paste0(species, "-", Nearest_plotID),
    is.na(Nearest_plotID) ~ paste0(species, "-", DroughtNet_plot)
  ))

cond_data_OF <- cond_data_r |> 
  filter(is.na(DroughtNet_plot))

cond_data_DN <- cond_data_r |> 
  filter(!is.na(DroughtNet_plot))


SP_data <- SP_data |> 
  rename(species_full = species) |> 
  mutate(species = case_when(
    species_full == "Vaccinium vitis-idaea" ~ "VV",
    species_full == "Vaccinium myrtillus" ~ "VM",
    TRUE ~ NA_character_  # pour toutes les autres espèces, mettre NA
  )) |> 
   mutate(cond_code = case_when(
    !is.na(Nearest_plotID) ~ paste0(species, "-", Nearest_plotID),
    is.na(Nearest_plotID) ~ paste0(species, "-", DroughtNet_Plot)
  ))
  
  SP_data <- SP_data |> 
  left_join(select(cond_data_r, cond_code, stomatal_conductance_mean_p, stomatal_conductance_min, stomatal_conductance_max), by = "cond_code") |> 
    distinct(plant_id, .keep_all = TRUE)

```

Importation of leaf area

```{r}
leaf_area_PI_Rey <- read.csv("D:/Utilisateurs/Touriere/Documents/SIRD_leaf_area/Calculation/2024_DURIN_Leaf_Scans_1907_PI_REY/Output/DURIN_Calculated_Leaf_Area_2024_07_19.csv")
leaf_area_PI_Grogu <- read.csv("D:/Utilisateurs/Touriere/Documents/SIRD_leaf_area/Calculation/2024_DURIN_leaf_scans_1907_PI_Grogu/Output/DURIN_Calculated_Leaf_Area_2024_07_19_grogu.csv")

leaf_area_PI <- rbind(leaf_area_PI_Rey,leaf_area_PI_Grogu)
rm(leaf_area_PI_Grogu, leaf_area_PI_Rey)

#edit wrong ID

leaf_area_PI <- leaf_area_PI |> 
  arrange(ID)

new_ids <- c("IBW3196", "ITA6153", "GQX9461", "GRB7361", "IOP353", "GRI3259", "GTT1344")

# Modifier les IDs des 7 premières lignes
leaf_area_PI$ID[1:7] <- new_ids
library(dplyr)

leaf_area_PI <- leaf_area_PI |> 
  select("envelope_ID" = ID, "leaves_count" = n, leaf_area)


leaf_trait_data <-  leaf_trait_data |> 
  mutate(across(where(is.character), ~replace(., . == "Not Applicable", NA)))
leaf_trait_data$plant_nr <- as.double(leaf_trait_data$plant_nr)

leaf_trait_data_join <- SP_data |> 
  select(day, month, year, siteID, habitat, species_full, DroughtTrt,  DroughtNet_Plot, PlantNR, Nearest_plotID) |> 
  rename(species = species_full, DroughNet_plotID = DroughtNet_Plot, plant_nr = PlantNR, nearest_DURIN_plotID = Nearest_plotID) |> 
  left_join(leaf_trait_data, by = join_by(day, month, year, siteID, habitat, species, DroughtTrt,DroughNet_plotID, plant_nr, nearest_DURIN_plotID)) |> 
  left_join(leaf_area_PI, by = join_by(envelope_ID)) |> 
  select(day, month, year, siteID, habitat, species, DroughtTrt, DroughNet_plotID, plant_nr, nearest_DURIN_plotID, envelope_ID, leaf_nr, wet_mass_g, starts_with("leaf_thickness"), dry_mass_g, scanned, leaves_count, leaf_area)

#adding plant_id "LY_F_VV1"
leaf_trait_data_join <- leaf_trait_data_join |> 
  mutate(
    # Définir AA
    AA = case_when(
      siteID == "Lygra" ~ "LY",
      siteID == "Sogndal" ~ "SO",
      siteID == "Senje" ~ "SE",
      siteID == "Kautokeino" ~ "KA",
      TRUE ~ NA_character_
    ),
    
    # Définir B
    B = case_when(
      habitat == "Open" ~ "O",
      habitat == "Forested" ~ "F",
      TRUE ~ NA_character_
    ),
    
    # Définir CC
    CC = case_when(
      species == "Vaccinium myrtillus" ~ "VM",
      species == "Vaccinium vitis-idaea" ~ "VV",
      TRUE ~ NA_character_
    ),
    
    # Définir D
    D = as.character(plant_nr),
    
    # Définir EE
    EE = case_when(
      siteID == "Lygra" ~ "LY",
      siteID == "Sogndal" ~ "SO",
      siteID == "Senje" ~ "SE",
      siteID == "Kautokeino" ~ "KA",
      TRUE ~ NA_character_
    ),
    
    # Définir DN
    DN = "DN",
    
    # Définir FF
    FF = as.character(DroughNet_plotID),
    
    # Définir GG
    GG = case_when(
      species == "Vaccinium myrtillus" ~ "VM",
      species == "Vaccinium vitis-idaea" ~ "VV",
      TRUE ~ NA_character_
    ),
    
    # Définir H
    H = as.character(plant_nr),
    
    # Construire plant_id
    plant_id = case_when(
      !is.na(habitat) ~ paste0(AA, "_", B, "_", CC, D),
      TRUE ~ paste0(EE, "_", DN, FF, "_", GG, H)
    )
  ) |> 
  select(-AA, -B, -CC, -D, -EE, -DN, -FF, -GG, -H)

plant_id_leaf_area <- leaf_trait_data_join |>
  group_by(plant_id) |> 
  summarise(mean_leaf_area = mean(leaf_area, na.rm = TRUE),
            sd_leaf_area = sd(leaf_area, na.rm = TRUE)) |> 
  ungroup() |> 
  left_join(leaf_trait_data_join, by = "plant_id") |> 
  distinct(plant_id, .keep_all = TRUE) |> 
  select( plant_id, siteID, species, habitat, scanned, mean_leaf_area, sd_leaf_area) |>  #mean of the size for all the pictures for one plant 
 mutate(species = case_when(
      species == "Vaccinium myrtillus" ~ "VM",
      species == "Vaccinium vitis-idaea" ~ "VV",
      TRUE ~ NA_character_
    ))

#cleaning problems of scanned ID
violating_envelope_IDs <- leaf_trait_data_join |> 
  filter((scanned == "yes" & is.na(leaf_area)) | 
         (scanned == "no" & !is.na(leaf_area))) |> 
  select(envelope_ID, siteID, habitat, scanned, leaves_count, leaf_area) |> 
  distinct()

leaf_trait_data_join <-  leaf_trait_data_join |> 
      mutate(leaf_thickness_mean_p = rowMeans(select(leaf_trait_data_join,
      leaf_thickness_1_mm, leaf_thickness_2_mm, leaf_thickness_3_mm))) |> 
  mutate(leaf_thickness_sd_p = apply(select(leaf_trait_data_join, starts_with("leaf_thickness")), 1, sd, na.rm = TRUE))

plant_id_leaf_thickness <- leaf_trait_data_join |>
  group_by(plant_id) |> 
   summarise(mean_leaf_thickness = mean(leaf_thickness_mean_p, na.rm = TRUE),
            sd_leaf_thickness = sd(leaf_thickness_mean_p, na.rm = TRUE)) |> 
  ungroup() |> 
  left_join(leaf_trait_data_join, by = "plant_id") |> 
  distinct(plant_id, .keep_all = TRUE) |> 
  select( plant_id, siteID, species, mean_leaf_thickness, sd_leaf_thickness) |>  #mean of the size for all the pictures for one plant 
 mutate(species = case_when(
      species == "Vaccinium myrtillus" ~ "VM",
      species == "Vaccinium vitis-idaea" ~ "VV",
      TRUE ~ NA_character_
    ))

plant_id_leaf_wetmass <- leaf_trait_data_join |>
  group_by(plant_id) |> 
   summarise(mean_leaf_wetmass = mean(wet_mass_g, na.rm = TRUE),
            sd_leaf_wetmass = sd(wet_mass_g, na.rm = TRUE)) |> 
  ungroup() |> 
  left_join(leaf_trait_data_join, by = "plant_id") |> 
  distinct(plant_id, .keep_all = TRUE) |> 
  select( plant_id, siteID, species, mean_leaf_wetmass, sd_leaf_wetmass) |>  #mean of the size for all the pictures for one plant 
 mutate(species = case_when(
      species == "Vaccinium myrtillus" ~ "VM",
      species == "Vaccinium vitis-idaea" ~ "VV",
      TRUE ~ NA_character_
    ))

plant_id_height <- SP_data |>
  mutate(plant_mean_height = rowMeans(select(SP_data,starts_with("plant_height")), na.rm = TRUE)) |> 
  group_by(plant_id) |> 
  ungroup() |> 
  select( plant_id, siteID, species, plant_mean_height)  #mean of the size for all the pictures for one plant 


plant_id_data <- plant_id_density_mean |> 
  left_join(plant_id_stomata_surface, by = join_by(plant_id, siteID, species)) |> 
  left_join(plant_id_leaf_area, by = join_by(plant_id, siteID, species)) |> 
  left_join(plant_id_leaf_thickness, by = join_by(plant_id, siteID, species)) |> 
  left_join(plant_id_leaf_wetmass, by = join_by(plant_id, siteID, species)) |> 
  left_join(plant_id_height, by = join_by(plant_id, siteID, species))
```

Environment cleaning :

```{r}
rm(list = setdiff(ls(), c("PV_data", "SP_data", "cond_data","leaf_trait_data", "cond_data", "cond_data_r", "filtered_data", "habitat_density_mean", "habitat_stomata_surface", "leaf_id_density_mean", "leaf_id_density_mean_clean", "leaf_trait_data_join", "plant_id_data", "sp_data", "SP_data_photo_id", "SP_data_picture", "stomatal_conductance_mean", "stomatal_errorbar", "violating_envelope_IDs", "TOMST_data", "SP_data_density")))

```

filtering

```{r}
plant_id_data <- plant_id_data |> 
  select(plant_id, siteID, habitat, mean_stomatal_density, sd_stomatal_density, mean_stomatal_area_um2, "sd_stomatal_area_um2" = sd_area_um2, mean_leaf_area, sd_leaf_area, mean_leaf_thickness, sd_leaf_thickness,
                   mean_leaf_wetmass, sd_leaf_wetmass, plant_mean_height) |> 
  left_join(select(TOMST_data, -siteID, -habitat), by = join_by(plant_id)) |>
  left_join(select(SP_data,
            plant_id, species, stomatal_conductance_mean_p, stomatal_conductance_min, stomatal_conductance_max),
            by = join_by(plant_id))
  

plant_id_data_OF <-filter(plant_id_data, habitat %in% c("Open", "Forested"))
plant_id_data_DN <-filter(plant_id_data, !habitat %in% c("Open", "Forested"))
plant_id_data_LY_O<- plant_id_data |> 
  filter(siteID == "Lygra") |> 
  filter(habitat != "Forested")

SP_data_picture_OF <-filter(SP_data_picture, habitat %in% c("Open", "Forested"))
SP_data_picture_DN <-filter(SP_data_picture, !habitat %in% c("Open", "Forested"))
SP_data_picture_LY_O<- SP_data_picture |> 
  filter(siteID == "Lygra") |> 
  filter(habitat != "Forested")


```

plotting

```{r}
Sd_VM <- SP_data_picture_OF |> 
  filter(species == "VM") |> 
  summarise(Sd_mean = mean(stomatal_density_p),
            Sd_sd = sd(stomatal_density_p, na.rm = TRUE),
            Sa_mean = mean(mean_stomatal_area_um2_p),
            Sa_sd = sd(mean_stomatal_area_um2_p, na.rm = TRUE)) |> 
  mutate(Sd_min = Sd_mean - Sd_sd, Sd_max = Sd_mean + Sd_sd,
         Sa_min = Sa_mean - Sa_sd, Sa_max = Sa_mean + Sa_sd) |> 
  mutate(species = "VM")

Sd_VV <- SP_data_picture_OF |> 
  filter(species == "VV") |> 
  summarise(Sd_mean = mean(stomatal_density_p),
            Sd_sd = sd(stomatal_density_p, na.rm = TRUE),
            Sa_mean = mean(mean_stomatal_area_um2_p),
            Sa_sd = sd(mean_stomatal_area_um2_p, na.rm = TRUE)) |> 
  mutate(Sd_min = Sd_mean - Sd_sd, Sd_max = Sd_mean + Sd_sd,
         Sa_min = Sa_mean - Sa_sd, Sa_max = Sa_mean + Sa_sd) |> 
  mutate(species = "VV")

fig_save <- "C:/Users/Touriere/Desktop/GEN/4A/SIRD/Rapport/Images/R"
  


base <- SP_data_picture_OF |> 
  left_join(rbind(Sd_VM, Sd_VV)) |> 
  ggplot(aes(x = species, y = stomatal_density_p))

p_box <- base + geom_boxplot(aes(fill = species))
p_box_2 <- base + geom_boxplot(aes(fill = siteID))
p_vio <- base + geom_violin(aes(fill = species))
p_vio_2 <- base + geom_violin(aes(fill = siteID))
p_point <- base + geom_point(aes(colour = species))


p_jit <- SP_data_picture_OF |> 
  left_join(rbind(Sd_VM, Sd_VV)) |> 
  ggplot(aes(x = species, y = stomatal_density_p))+
         geom_jitter(aes(colour = species), show.legend = FALSE)+
         geom_errorbar(aes(ymin = Sd_min, ymax = Sd_max, width = 0.2)) +
         geom_point(aes(x = species, y = Sd_mean), size = 2)+ 
         labs(x = "Species", y = "Stomatal Density (stomata / mm²)")+
  theme(
    axis.title.x = element_text(size = 14), 
    axis.title.y = element_text(size = 14), 
    axis.text.x = element_text(size = 12), 
    axis.text.y = element_text(size = 12), 
    plot.subtitle = element_text(size = 14),
    plot.caption = element_text(size = 12)
  ) 

p_jit2 <- SP_data_picture_OF |> 
  left_join(rbind(Sd_VM, Sd_VV)) |> 
  ggplot(aes(x = species, y = mean_stomatal_area_um2_p))+
         geom_jitter(aes(colour = species), show.legend = FALSE)+
         geom_errorbar(aes(ymin = Sa_min, ymax = Sa_max, width = 0.2)) +
         geom_point(aes(x = species, y = Sa_mean), size = 2)+ 
         labs(x = "Species", y = "Mean Stomata Area (µm²)")+
  theme(
    axis.title.x = element_text(size = 14), 
    axis.title.y = element_text(size = 14), 
    axis.text.x = element_text(size = 12), 
    axis.text.y = element_text(size = 12), 
    plot.subtitle = element_text(size = 14),
    plot.caption = element_text(size = 12)
  ) 
         
library(ggforce)
library(cowplot)
library(ggpubr)
library(grid)
p_sina <- base + geom_sina(aes(colour = species))

p_box
p_box_2
p_vio 
p_vio_2
p_point
p_jit
p_jit2 
p_sina



p_jit_join <- ggarrange(
  p_jit, p_jit2,
  labels = c("a)", "b)"),
  ncol = 2,
  common.legend = TRUE,
  font.label = list(size = 17, face = "bold")
) 

p_jit_join

# Enregistrez le graphique avec ggsave()
ggsave(filename = paste0(fig_save, "/species_comp.png"), plot = p_jit_join, width = 10, height = 6, units = "in", dpi = 300)


```

mlde

```{r}

Stomatal_site <- SP_data_picture_OF |> 
  group_by(species, siteID) |> 
  summarise(Sd_mean = mean(stomatal_density_p),
            Sd_sd = sd(stomatal_density_p, na.rm = TRUE),
            Sa_mean = mean(mean_stomatal_area_um2_p),
            Sa_sd = sd(mean_stomatal_area_um2_p, na.rm = TRUE)) |> 
  mutate(Sd_min = Sd_mean - Sd_sd, Sd_max = Sd_mean + Sd_sd,
         Sa_min = Sa_mean - Sa_sd, Sa_max = Sa_mean + Sa_sd) 


base_sd <- SP_data_picture_OF |> 
  left_join(rbind(Stomatal_site)) |> 
  ggplot(aes(x = siteID, y = stomatal_density_p))

base_sa <- SP_data_picture_OF |> 
  left_join(rbind(Stomatal_site)) |> 
  ggplot(aes(x = siteID, y = mean_stomatal_area_um2_p))


f_grid_stomatal_density1 <- base_sd +
  geom_jitter(aes(color = species, shape = siteID), size = 3, ncol = 1) +
  geom_errorbar(aes(ymin = Sd_min, ymax = Sd_max), width = 0.2) +
  geom_point(aes(x = siteID, y = Sd_mean), size = 2)+
  facet_grid(. ~ species) +
  labs(x = "Species", y = "Stomatal Density (stomata / mm²)")+
  theme(
    axis.title.x = element_text(size = 14), 
    axis.title.y = element_text(size = 14), 
    axis.text.x = element_text(size = 12), 
    axis.text.y = element_text(size = 12), 
    plot.subtitle = element_text(size = 14),
    plot.caption = element_text(size = 14),
    legend.text = element_text(size = 12)
  ) 

# Afficher le graphique
print(f_grid_stomatal_density1)

f_grid_stomatal_area1 <- base_sa +
  geom_jitter(aes(color = species, shape = siteID), size = 3) +
  geom_errorbar(aes(ymin = Sa_min, ymax = Sa_max), width = 0.2) +
  geom_point(aes(x = siteID, y = Sa_mean), size = 2)+
  facet_grid(. ~ species) +
  labs(x = "Species", y = "Mean Stomatal Area (µm²)")+
  theme(
    axis.title.x = element_text(size = 14), 
    axis.title.y = element_text(size = 14), 
    axis.text.x = element_text(size = 12), 
    axis.text.y = element_text(size = 12), 
    plot.subtitle = element_text(size = 14),
    plot.caption = element_text(size = 14),
    legend.text = element_text(size = 12)
  ) 

# Afficher le graphique
print(f_grid_stomatal_area1)

f_grid_stomatal_density2 <- ggplot(SP_data_picture_OF, aes(x = species, y = stomatal_density_p, fill = habitat)) +
 geom_point(aes(color = species, shape = habitat), size = 3, width = 0.2, position = position_dodge(width = 0.75)) +
  geom_errorbar(aes(ymin = stomatal_density_min, ymax = stomatal_density_max), width = 0.2, position = position_dodge(width = 0.75)) +
  geom_point(aes(x = species, y = stomatal_density_mean), size = 2, position = position_dodge(width = 0.75))+
  facet_grid(. ~ siteID) +
  labs(x = "Species", y = "Stomatal Density (stomata / mm²)")+
   theme(legend.position = "bottom") + 
  theme(
    axis.title.x = element_text(size = 14), 
    axis.title.y = element_text(size = 14), 
    axis.text.x = element_text(size = 12), 
    axis.text.y = element_text(size = 12), 
    plot.subtitle = element_text(size = 14),
    plot.caption = element_text(size = 14),
    legend.text = element_text(size = 12)
  ) 

# Afficher le graphique
print(f_grid_stomatal_density2)

f_grid_stomatal_area2 <- ggplot(SP_data_picture_OF, aes(x = species, y = mean_stomatal_area_um2_p, fill = habitat)) +
  geom_point(aes(color = species, shape = habitat), size = 3, width = 0.2, position = position_dodge(width = 0.75)) +
  geom_errorbar(aes(ymin = stomatal_area_min, ymax = stomatal_area_max), width = 0.2, position = position_dodge(width = 0.75)) +
  geom_point(aes(x = species, y = mean_stomatal_area), size = 2, position = position_dodge(width = 0.75))+
  facet_grid(. ~ siteID) +
  labs(x = "Species", y = "Mean Stomatal Area (µm²)")+
  theme(
    axis.title.x = element_text(size = 14), 
    axis.title.y = element_text(size = 14), 
    axis.text.x = element_text(size = 12), 
    axis.text.y = element_text(size = 12), 
    plot.subtitle = element_text(size = 14),
    plot.caption = element_text(size = 14),
    legend.text = element_text(size = 12)
  ) +
   theme(legend.position = "bottom")

# Afficher le graphique
print(f_grid_stomatal_area2)


f_grid_stomatal_area <- ggplot(SP_data_picture_OF, aes(x = species, y = mean_stomatal_area_um2_p, fill = habitat)) +
  geom_boxplot() +
  geom_errorbar(aes(ymin = SP_data_picture_OF$stomatal_area_min, ymax = SP_data_picture_OF$stomatal_area_max), width = 0.2, position = position_dodge(width = 0.75)) +
  facet_grid(. ~ siteID) +
  labs(x = "Species", y = "Stomatal area (µm²)") 

# Afficher le graphique
print(f_grid_stomatal_area)

# Créer le graphique avec les points et les barres d'erreur
f_grid_stomatal_tradeoff <- ggplot(SP_data_picture_OF, aes(x = mean_stomatal_area_um2_p, y = stomatal_density_p, color = species)) +
  geom_point(aes(shape = species), size = 3) + # Ajoute des points avec des formes différentes pour chaque espèce
  geom_smooth(aes(color = species), method = "lm") + # Ajoute des lignes de régression séparées pour chaque espèce
 # geom_errorbar(aes(ymin = ymin, ymax = ymax), width = 0.2, position = position_dodge(width = 0.75)) + # Ajoute des barres d'erreur
  facet_grid(. ~ siteID) + # Crée des facettes pour chaque site
  labs(x = "Stomatal Area (µm²)", y = "Stomatal Density (stomata / mm²)") + 
  theme(
    axis.title.x = element_text(size = 14), 
    axis.title.y = element_text(size = 14), 
    axis.text.x = element_text(size = 12), 
    axis.text.y = element_text(size = 12), 
    plot.subtitle = element_text(size = 14),
    plot.caption = element_text(size = 14),
    legend.text = element_text(size = 12)
  ) 

# Afficher le graphique
print(f_grid_stomatal_tradeoff)


# Créer le graphique avec les points et les barres d'erreur
f_grid_stomatal_tradeoff2 <- ggplot(SP_data_picture_OF, aes(x = mean_stomatal_area_um2_p, y = stomatal_density_p, color = species)) +
  geom_point(aes(shape = siteID), size = 3) + # Ajoute des points avec des formes différentes pour chaque espèce
 # geom_smooth(aes(color = species), method = "lm") +
  labs(x = "Stomatal Area (µm²)", y = "Stomatal Density (stomata / mm²)") + 
  theme(
    axis.title.x = element_text(size = 14), 
    axis.title.y = element_text(size = 14), 
    axis.text.x = element_text(size = 12), 
    axis.text.y = element_text(size = 12), 
    plot.subtitle = element_text(size = 14),
    plot.caption = element_text(size = 14),
    legend.text = element_text(size = 12)
  ) 

# Afficher le graphique
print(f_grid_stomatal_tradeoff2)

site_join <- ggarrange(
  f_grid_stomatal_density1, f_grid_stomatal_area1,
  labels = c("a)", "b)"),
  ncol = 1,
  
  common.legend = TRUE,
  font.label = list(size = 17, face = "bold")
)


site_join

habitat_join <- ggarrange(
  f_grid_stomatal_density2, f_grid_stomatal_area2,
  labels = c("a)", "b)"),
  ncol = 1,
  
  common.legend = TRUE,
  font.label = list(size = 17, face = "bold")
) 


habitat_join

ggsave(filename = paste0(fig_save, "/site_comp.png"), plot = site_join, width = 10, height = 12, units = "in", dpi = 300)

ggsave(filename = paste0(fig_save, "/habitat_comp.png"), plot = habitat_join, width = 10, height = 12, units = "in", dpi = 300)


ggsave(filename = paste0(fig_save, "/habitat_tradeoff.png"), plot = f_grid_stomatal_tradeoff, width = 10, height = 6, units = "in", dpi = 300)

```

plot with conductance

```{r}
f_grid_stomatal_cond <-plant_id_data_OF |> 
  filter(!is.na(stomatal_conductance_mean_p)) |> 
  filter(!is.na(habitat)) |>
  ggplot(aes(x = mean_stomatal_density, y = stomatal_conductance_mean_p, fill = species)) +
  geom_point(aes(shape = siteID), size = 3) + # Ajoute des points avec des formes différentes pour chaque espèce
  geom_smooth(aes(color = species), method = "lm") + # Ajoute des lignes de régression séparées pour chaque espèce
 # geom_errorbar(aes(ymin = ymin, ymax = ymax), width = 0.2, position = position_dodge(width = 0.75)) + # Ajoute des barres d'erreur
  labs(x = "Stomatal Density (stomata / mm²)", y = "Stomatal conductance (mmol/(m².s)") +
   theme(legend.position = "bottom")
# Afficher le graphique
print(f_grid_stomatal_cond)

f_grid_stomatal_cond2 <-plant_id_data_OF |> 
  filter(!is.na(stomatal_conductance_mean_p)) |> 
  filter(!is.na(habitat)) |>
  filter(stomatal_conductance_mean_p > 150) |> 
  ggplot(aes(x = mean_stomatal_density, y = stomatal_conductance_mean_p, fill = species)) +
  geom_point(aes(shape = siteID), size = 3) + # Ajoute des points avec des formes différentes pour chaque espèce
  geom_smooth(aes(color = species), method = "lm") + # Ajoute des lignes de régression séparées pour chaque espèce
 # geom_errorbar(aes(ymin = ymin, ymax = ymax), width = 0.2, position = position_dodge(width = 0.75)) + # Ajoute des barres d'erreur
  labs(x = "Stomatal Density (stomata / mm²)", y = "Stomatal conductance (mmol/(m².s)") +
   theme(legend.position = "bottom")+ 
  theme(
    axis.title.x = element_text(size = 14), 
    axis.title.y = element_text(size = 14), 
    axis.text.x = element_text(size = 12), 
    axis.text.y = element_text(size = 12), 
    plot.subtitle = element_text(size = 14),
    plot.caption = element_text(size = 14),
    legend.text = element_text(size = 12)
  ) 
# Afficher le graphique
print(f_grid_stomatal_cond2)

f_grid_stomatal_cond3 <-plant_id_data_OF |> 
  filter(!is.na(stomatal_conductance_mean_p)) |> 
  filter(!is.na(habitat)) |>
  ggplot(aes(x = mean_stomatal_area_um2, y = stomatal_conductance_mean_p, fill = species)) +
  geom_point(aes(shape = species), size = 3) + # Ajoute des points avec des formes différentes pour chaque espèce
  geom_smooth(aes(color = species), method = "lm") + # Ajoute des lignes de régression séparées pour chaque espèce
  labs(x = "Stomatal size (µm²)", y = "Stomatal conductance (mmol/(m².s)") +
   theme(legend.position = "bottom")
# Afficher le graphique
print(f_grid_stomatal_cond3)

f_grid_stomatal_cond4 <-plant_id_data_OF |> 
  filter(!is.na(stomatal_conductance_mean_p)) |> 
  filter(!is.na(habitat)) |>
    filter(stomatal_conductance_mean_p > 150) |>
  ggplot(aes(x = mean_stomatal_area_um2, y = stomatal_conductance_mean_p, fill = species)) +
  geom_point(aes(shape = species), size = 3) + # Ajoute des points avec des formes différentes pour chaque espèce
  geom_smooth(aes(color = species), method = "lm") + # Ajoute des lignes de régression séparées pour chaque espèce
  labs(x = "Stomatal area (µm²)", y = "Stomatal conductance (mmol/(m².s)") +
   theme(legend.position = "bottom")+ 
  theme(
    axis.title.x = element_text(size = 14), 
    axis.title.y = element_text(size = 14), 
    axis.text.x = element_text(size = 12), 
    axis.text.y = element_text(size = 12), 
    plot.subtitle = element_text(size = 14),
    plot.caption = element_text(size = 14),
    legend.text = element_text(size = 12)
  ) 
# Afficher le graphique
print(f_grid_stomatal_cond4)

f_grid_stomatal_cond5 <- plant_id_data_OF |> 
  filter(!is.na(stomatal_conductance_mean_p)) |>
  filter(!is.na(habitat)) |>
  ggplot(aes(x = species, y = stomatal_conductance_mean_p, fill = habitat)) +
  geom_boxplot() +
  geom_errorbar(aes(ymin = stomatal_conductance_min, ymax = stomatal_conductance_max), width = 0.2, position = position_dodge(width = 0.75)) + # Ajoute des barres d'erreur
  facet_grid(. ~ siteID) +
  labs(x = "Species", y = "Stomatal conductance (mmol/(m².s)") +
   theme(legend.position = "bottom")

print(f_grid_stomatal_cond5)

cond_join <- ggarrange(
  f_grid_stomatal_cond2, f_grid_stomatal_cond4,
  labels = c("a)", "b)"),
  ncol = 1,
  
  common.legend = TRUE,
  font.label = list(size = 17, face = "bold")
) 

cond_join

ggsave(filename = paste0(fig_save, "/cond_density.png"), plot = f_grid_stomatal_cond2, width = 10, height = 6, units = "in", dpi = 300)


ggsave(filename = paste0(fig_save, "/cond_area.png"), plot = f_grid_stomatal_cond4, width = 10, height = 6, units = "in", dpi = 300)

ggsave(filename = paste0(fig_save, "/cond_join.png"), plot = cond_join, width = 10, height = 12, units = "in", dpi = 300)
```

leaf area :

```{r}
#Density
# Créer le graphique avec les points et les barres d'erreur
f_grid_plant_height_tradeoff <- plant_id_data_OF |> 
  filter(!is.na(habitat)) |>
  ggplot(aes(y = mean_stomatal_density, x = plant_mean_height, color = species)) +
  geom_point(aes(shape = siteID), size = 3) + # Ajoute des points avec des formes différentes pour chaque espèce
  geom_smooth(aes(color = species), method = "lm") + # Ajoute des lignes de régression séparées pour chaque espèce
 # geom_errorbar(aes(ymin = ymin, ymax = ymax), width = 0.2, position = position_dodge(width = 0.75)) + # Ajoute des barres d'erreur
 # facet_grid(. ~ siteID) + # Crée des facettes pour chaque site
  labs(y = "Stomatal Density (stomata / mm²)", x = "Plant height (cm)") +
   theme(legend.position = "bottom")+ 
  theme(
    axis.title.x = element_text(size = 14), 
    axis.title.y = element_text(size = 14), 
    axis.text.x = element_text(size = 12), 
    axis.text.y = element_text(size = 12), 
    plot.subtitle = element_text(size = 14),
    plot.caption = element_text(size = 14),
    legend.text = element_text(size = 12)
  ) 

# Afficher le graphique
print(f_grid_plant_height_tradeoff)

# Créer le graphique avec les points et les barres d'erreur
f_grid_leaf_area_tradeoff <- plant_id_data_OF |> 
  filter(!is.na(habitat)) |>
  ggplot(aes(y = mean_stomatal_density, x = mean_leaf_area, color = species)) +
  geom_point(aes(shape = siteID), size = 3) + # Ajoute des points avec des formes différentes pour chaque espèce
  geom_smooth(aes(color = species), method = "lm") + # Ajoute des lignes de régression séparées pour chaque espèce
 # geom_errorbar(aes(ymin = ymin, ymax = ymax), width = 0.2, position = position_dodge(width = 0.75)) + # Ajoute des barres d'erreur
 # facet_grid(. ~ siteID) + # Crée des facettes pour chaque site
  labs(y = "Stomatal Density (stomata / mm²)", x = "Plant mean leaf area (cm²)") +
   theme(legend.position = "bottom")+ 
  theme(
    axis.title.x = element_text(size = 14), 
    axis.title.y = element_text(size = 14), 
    axis.text.x = element_text(size = 12), 
    axis.text.y = element_text(size = 12), 
    plot.subtitle = element_text(size = 14),
    plot.caption = element_text(size = 14),
    legend.text = element_text(size = 12)
  ) 

# Afficher le graphique
print(f_grid_leaf_area_tradeoff)

# Créer le graphique avec les points et les barres d'erreur
f_grid_leaf_thickness_tradeoff <- plant_id_data_OF |> 
  filter(!is.na(habitat)) |>
  ggplot(aes(y = mean_stomatal_density, x = mean_leaf_thickness, color = species)) +
  geom_point(aes(shape = siteID), size = 3) + # Ajoute des points avec des formes différentes pour chaque espèce
  geom_smooth(aes(color = species), method = "lm") + # Ajoute des lignes de régression séparées pour chaque espèce
 # geom_errorbar(aes(ymin = ymin, ymax = ymax), width = 0.2, position = position_dodge(width = 0.75)) + # Ajoute des barres d'erreur
 # facet_grid(. ~ siteID) + # Crée des facettes pour chaque site
  labs(y = "Stomatal Density (stomata / mm²)", x = "plant leaf thickness (mm)") +
   theme(legend.position = "bottom")+ 
  theme(
    axis.title.x = element_text(size = 14), 
    axis.title.y = element_text(size = 14), 
    axis.text.x = element_text(size = 12), 
    axis.text.y = element_text(size = 12), 
    plot.subtitle = element_text(size = 14),
    plot.caption = element_text(size = 14),
    legend.text = element_text(size = 12)
  ) 

# Afficher le graphique
print(f_grid_leaf_thickness_tradeoff)

# Créer le graphique avec les points et les barres d'erreur
f_grid_leaf_wetmass_tradeoff <- plant_id_data_OF |> 
  filter(!is.na(habitat)) |>
  filter(mean_leaf_wetmass < 0.1) |> 
  ggplot(aes(y = mean_stomatal_density, x = mean_leaf_wetmass, color = species)) +
  geom_point(aes(shape = siteID), size = 3) + # Ajoute des points avec des formes différentes pour chaque espèce
  geom_smooth(aes(color = species), method = "lm") + # Ajoute des lignes de régression séparées pour chaque espèce
 # geom_errorbar(aes(ymin = ymin, ymax = ymax), width = 0.2, position = position_dodge(width = 0.75)) + # Ajoute des barres d'erreur
 # facet_grid(. ~ siteID) + # Crée des facettes pour chaque site
  labs(y = "Stomatal Density (stomata / mm²)", x = "plant leaf wetmass (g)") +
   theme(legend.position = "bottom")+ 
  theme(
    axis.title.x = element_text(size = 14), 
    axis.title.y = element_text(size = 14), 
    axis.text.x = element_text(size = 12), 
    axis.text.y = element_text(size = 12), 
    plot.subtitle = element_text(size = 14),
    plot.caption = element_text(size = 14),
    legend.text = element_text(size = 12)
  ) 

# Afficher le graphique
print(f_grid_leaf_wetmass_tradeoff)

leaf_join <- ggarrange(
  f_grid_leaf_area_tradeoff, f_grid_plant_height_tradeoff,
  labels = c("a)", "b)"),
  ncol = 1,
  
  common.legend = TRUE,
  font.label = list(size = 17, face = "bold")
) 

leaf_join


ggsave(filename = paste0(fig_save, "/leaf_tradeoff.png"), plot = f_grid_leaf_area_tradeoff, width = 10, height = 6, units = "in", dpi = 300)

ggsave(filename = paste0(fig_save, "/height_tradeoff.png"), plot = f_grid_plant_height_tradeoff, width = 10, height = 6, units = "in", dpi = 300)

ggsave(filename = paste0(fig_save, "/leaf_join.png"), plot = leaf_join, width = 10, height = 12, units = "in", dpi = 300)
```

```{r}
#Area
# Créer le graphique avec les points et les barres d'erreur
f_grid_plant_height_tradeoff2 <- plant_id_data_OF |> 
  filter(!is.na(habitat)) |>
  ggplot(aes(y = mean_stomatal_area_um2, x = plant_mean_height, color = species)) +
  geom_point(aes(shape = siteID), size = 3) + # Ajoute des points avec des formes différentes pour chaque espèce
  geom_smooth(aes(color = species), method = "lm") + # Ajoute des lignes de régression séparées pour chaque espèce
 # geom_errorbar(aes(ymin = ymin, ymax = ymax), width = 0.2, position = position_dodge(width = 0.75)) + # Ajoute des barres d'erreur
 # facet_grid(. ~ siteID) + # Crée des facettes pour chaque site
  labs(y = "Stomatal size (µm²)", x = "Plant height (cm)") +
   theme(legend.position = "bottom")+ 
  theme(
    axis.title.x = element_text(size = 14), 
    axis.title.y = element_text(size = 14), 
    axis.text.x = element_text(size = 12), 
    axis.text.y = element_text(size = 12), 
    plot.subtitle = element_text(size = 14),
    plot.caption = element_text(size = 14),
    legend.text = element_text(size = 12)
  ) 

# Afficher le graphique
print(f_grid_plant_height_tradeoff2)

# Créer le graphique avec les points et les barres d'erreur
f_grid_leaf_area_tradeoff2 <- plant_id_data_OF |> 
  filter(!is.na(habitat)) |>
  ggplot(aes(y = mean_stomatal_area_um2, x = mean_leaf_area, color = species)) +
  geom_point(aes(shape = siteID), size = 3) + # Ajoute des points avec des formes différentes pour chaque espèce
  geom_smooth(aes(color = species), method = "lm") + # Ajoute des lignes de régression séparées pour chaque espèce
 # geom_errorbar(aes(ymin = ymin, ymax = ymax), width = 0.2, position = position_dodge(width = 0.75)) + # Ajoute des barres d'erreur
 # facet_grid(. ~ siteID) + # Crée des facettes pour chaque site
  labs(y = "Stomatal size (µm²)", x = "Plant leaf area (cm²)") +
   theme(legend.position = "bottom")+ 
  theme(
    axis.title.x = element_text(size = 14), 
    axis.title.y = element_text(size = 14), 
    axis.text.x = element_text(size = 12), 
    axis.text.y = element_text(size = 12), 
    plot.subtitle = element_text(size = 14),
    plot.caption = element_text(size = 14),
    legend.text = element_text(size = 12)
  ) 

# Afficher le graphique
print(f_grid_leaf_area_tradeoff2)

# Créer le graphique avec les points et les barres d'erreur
f_grid_leaf_thickness_tradeoff2 <- plant_id_data_OF |> 
  filter(!is.na(habitat)) |>
  ggplot(aes(y = mean_stomatal_area_um2, x = mean_leaf_thickness, color = species)) +
  geom_point(aes(shape = siteID), size = 3) + # Ajoute des points avec des formes différentes pour chaque espèce
  geom_smooth(aes(color = species), method = "lm") + # Ajoute des lignes de régression séparées pour chaque espèce
 # geom_errorbar(aes(ymin = ymin, ymax = ymax), width = 0.2, position = position_dodge(width = 0.75)) + # Ajoute des barres d'erreur
 # facet_grid(. ~ siteID) + # Crée des facettes pour chaque site
  labs(y = "Stomatal size (µm²)", x = "plant leaf thickness (mm)") +
   theme(legend.position = "bottom")+ 
  theme(
    axis.title.x = element_text(size = 14), 
    axis.title.y = element_text(size = 14), 
    axis.text.x = element_text(size = 12), 
    axis.text.y = element_text(size = 12), 
    plot.subtitle = element_text(size = 14),
    plot.caption = element_text(size = 14),
    legend.text = element_text(size = 12)
  ) 

# Afficher le graphique
print(f_grid_leaf_thickness_tradeoff2)

# Créer le graphique avec les points et les barres d'erreur
f_grid_leaf_wetmass_tradeoff2 <- plant_id_data_OF |> 
  filter(!is.na(habitat)) |>
  filter(mean_leaf_wetmass < 0.1) |> 
  ggplot(aes(y = mean_stomatal_area_um2, x = mean_leaf_wetmass, color = species)) +
  geom_point(aes(shape = siteID), size = 3) + # Ajoute des points avec des formes différentes pour chaque espèce
  geom_smooth(aes(color = species), method = "lm") + # Ajoute des lignes de régression séparées pour chaque espèce
 # geom_errorbar(aes(ymin = ymin, ymax = ymax), width = 0.2, position = position_dodge(width = 0.75)) + # Ajoute des barres d'erreur
 # facet_grid(. ~ siteID) + # Crée des facettes pour chaque site
  labs(y = "Stomatal size (µm²)", x = "plant leaf wetmass (g)") +
   theme(legend.position = "bottom")+ 
  theme(
    axis.title.x = element_text(size = 14), 
    axis.title.y = element_text(size = 14), 
    axis.text.x = element_text(size = 12), 
    axis.text.y = element_text(size = 12), 
    plot.subtitle = element_text(size = 14),
    plot.caption = element_text(size = 14),
    legend.text = element_text(size = 12)
  ) 

# Afficher le graphique
print(f_grid_leaf_wetmass_tradeoff2)

ggsave(filename = paste0(fig_save, "/leaf_tradeoff_area.png"), plot = f_grid_leaf_area_tradeoff2, width = 10, height = 6, units = "in", dpi = 300)

ggsave(filename = paste0(fig_save, "/thickness_tradeoff_area.png"), plot = f_grid_leaf_thickness_tradeoff2, width = 6, height = 6, units = "in", dpi = 300)

ggsave(filename = paste0(fig_save, "/wetmass_tradeoff_area.png"), plot = f_grid_leaf_wetmass_tradeoff2, width = 6, height = 6, units = "in", dpi = 300)
```

growth condition :

```{r}
# Créer le graphique avec les points et les barres d'erreur
f_grid_plant_soil_vwc2 <- plant_id_data_OF |> 
  filter(!is.na(habitat)) |>
  ggplot(aes(y = mean_stomatal_density, x = VWC.soil_0_15_cm.mean, color = species)) +
  geom_point(aes(shape = siteID), size = 3) + # Ajoute des points avec des formes différentes pour chaque espèce
  geom_smooth(aes(color = species), method = "lm") + # Ajoute des lignes de régression séparées pour chaque espèce
#  facet_grid(. ~ species) + # Crée des facettes pour chaque site
  labs(y = "Stomatal Density (stomata / mm²)", x = "Volumetric water content")+ 
  theme(
    axis.title.x = element_text(size = 14), 
    axis.title.y = element_text(size = 14), 
    axis.text.x = element_text(size = 12), 
    axis.text.y = element_text(size = 12), 
    plot.subtitle = element_text(size = 14),
    plot.caption = element_text(size = 14),
    legend.text = element_text(size = 12)
  ) 

# Afficher le graphique
print(f_grid_plant_soil_vwc2)

f_grid_plant_soil_T2 <- plant_id_data_OF |> 
  filter(!is.na(habitat)) |>
  ggplot(aes(y = mean_stomatal_density, x = T.soil_8_cm.mean, color = species)) +
  geom_point(aes(shape = siteID), size = 3) + # Ajoute des points avec des formes différentes pour chaque espèce
  geom_smooth(aes(color = species), method = "lm") + # Ajoute des lignes de régression séparées pour chaque espèce
#  facet_grid(. ~ species) + # Crée des facettes pour chaque site
  labs(y = "Stomatal Density (stomata / mm²)", x = "Soil Temperature (°C)")+ 
  theme(
    axis.title.x = element_text(size = 14), 
    axis.title.y = element_text(size = 14), 
    axis.text.x = element_text(size = 12), 
    axis.text.y = element_text(size = 12), 
    plot.subtitle = element_text(size = 14),
    plot.caption = element_text(size = 14),
    legend.text = element_text(size = 12)
  ) 

# Afficher le graphique
print(f_grid_plant_soil_T2)

f_grid_plant_soil_Frost2 <- plant_id_data_OF |> 
  filter(!is.na(habitat)) |>
  ggplot(aes(y = mean_stomatal_density, x = T.soil_8_cm.frostdays, color = species)) +
  geom_point(aes(shape = siteID), size = 3) + # Ajoute des points avec des formes différentes pour chaque espèce
  geom_smooth(aes(color = species), method = "lm") + # Ajoute des lignes de régression séparées pour chaque espèce
#  facet_grid(. ~ species) + # Crée des facettes pour chaque site
  labs(y = "Stomatal Density (stomata / mm²)", x = "Number of frostdays")+ 
  theme(
    axis.title.x = element_text(size = 14), 
    axis.title.y = element_text(size = 14), 
    axis.text.x = element_text(size = 12), 
    axis.text.y = element_text(size = 12), 
    plot.subtitle = element_text(size = 14),
    plot.caption = element_text(size = 14),
    legend.text = element_text(size = 12)
  ) 

# Afficher le graphique
print(f_grid_plant_soil_Frost2)

f_grid_plant_air_T2cm2 <- plant_id_data_OF |> 
  filter(!is.na(habitat)) |>
  ggplot(aes(y = mean_stomatal_density, x = T.air_2_cm.mean, color = species)) +
  geom_point(aes(shape = siteID), size = 3) + # Ajoute des points avec des formes différentes pour chaque espèce
  geom_smooth(aes(color = species), method = "lm") + # Ajoute des lignes de régression séparées pour chaque espèce
#  facet_grid(. ~ species) + # Crée des facettes pour chaque site
  labs(y = "Stomatal Density (stomata / mm²)", x = "2cm Air Temperature (°C)")+ 
  theme(
    axis.title.x = element_text(size = 14), 
    axis.title.y = element_text(size = 14), 
    axis.text.x = element_text(size = 12), 
    axis.text.y = element_text(size = 12), 
    plot.subtitle = element_text(size = 14),
    plot.caption = element_text(size = 14),
    legend.text = element_text(size = 12)
  ) 

# Afficher le graphique
print(f_grid_plant_air_T2cm2)

f_grid_plant_air_FD2cm2 <- plant_id_data_OF |> 
  filter(!is.na(habitat)) |>
  ggplot(aes(y = mean_stomatal_density, x = T.air_2_cm.frostdays, color = species)) +
  geom_point(aes(shape = siteID), size = 3) + # Ajoute des points avec des formes différentes pour chaque espèce
  geom_smooth(aes(color = species), method = "lm") + # Ajoute des lignes de régression séparées pour chaque espèce
#  facet_grid(. ~ species) + # Crée des facettes pour chaque site
  labs(y = "Stomatal Density (stomata / mm²)", x = "Number of frostdays")+ 
  theme(
    axis.title.x = element_text(size = 14), 
    axis.title.y = element_text(size = 14), 
    axis.text.x = element_text(size = 12), 
    axis.text.y = element_text(size = 12), 
    plot.subtitle = element_text(size = 14),
    plot.caption = element_text(size = 14),
    legend.text = element_text(size = 12)
  ) 

# Afficher le graphique
print(f_grid_plant_air_FD2cm2)

f_grid_plant_air_T15cm2 <- plant_id_data_OF |> 
  filter(!is.na(habitat)) |>
  ggplot(aes(y = mean_stomatal_density, x = T.air_15_cm.mean, color = species)) +
  geom_point(aes(shape = siteID), size = 3) + # Ajoute des points avec des formes différentes pour chaque espèce
  geom_smooth(aes(color = species), method = "lm") + # Ajoute des lignes de régression séparées pour chaque espèce
#  facet_grid(. ~ species) + # Crée des facettes pour chaque site
  labs(y = "Stomatal Density (stomata / mm²)", x = "15cm Air Temperature (°C)")+ 
  theme(
    axis.title.x = element_text(size = 14), 
    axis.title.y = element_text(size = 14), 
    axis.text.x = element_text(size = 12), 
    axis.text.y = element_text(size = 12), 
    plot.subtitle = element_text(size = 14),
    plot.caption = element_text(size = 14),
    legend.text = element_text(size = 12)
  ) 

print(f_grid_plant_air_T15cm2)


soil_join <- ggarrange(
  f_grid_plant_soil_vwc2, f_grid_plant_soil_vwc12, f_grid_plant_soil_T2, f_grid_plant_soil_T12,
  labels = c("a)", "b)", "c)", "d)"),
  ncol = 2,
  nrow = 2,
  common.legend = TRUE,
  font.label = list(size = 17, face = "bold")
) 

soil_join

#air_join <- ggarrange(
#  f_grid_plant_air_T2cm2, f_grid_plant_air_T2cm12, f_grid_plant_air_FD2cm2, f_grid_plant_air_FD2cm12,
#  labels = c("a)", "b)", "c)", "d)"),
#  ncol = 2,
#  nrow = 2,
#  common.legend = TRUE,
#  font.label = list(size = 17, face = "bold")
#) 

#air_join

ggsave(filename = paste0(fig_save, "/Sd_VWC2.png"), plot = f_grid_plant_soil_vwc2, width = 10, height = 6, units = "in", dpi = 300)
ggsave(filename = paste0(fig_save, "/Sd_Tsoil2.png"), plot = f_grid_plant_soil_T2, width = 10, height = 6, units = "in", dpi = 300)
ggsave(filename = paste0(fig_save, "/Sd_Tsfrost2.png"), plot = f_grid_plant_soil_Frost2, width = 10, height = 6, units = "in", dpi = 300)
ggsave(filename = paste0(fig_save, "/Sd_Ta2cm2.png"), plot = f_grid_plant_air_T2cm2, width = 10, height = 6, units = "in", dpi = 300)
ggsave(filename = paste0(fig_save, "/Sd_TaFd2cm2.png"), plot = f_grid_plant_air_FD2cm2, width = 10, height = 6, units = "in", dpi = 300)
ggsave(filename = paste0(fig_save, "/Sd_Ta15cm2.png"), plot = f_grid_plant_air_T15cm2, width = 10, height = 6, units = "in", dpi = 300)

ggsave(filename = paste0(fig_save, "/soil_comp.png"), plot = soil_join, width = 10, height = 12, units = "in", dpi = 300)
ggsave(filename = paste0(fig_save, "/air_comp.png"), plot = air_join, width = 10, height = 12, units = "in", dpi = 300)
```

growth variation

```{r}
# Créer le graphique avec les points et les barres d'erreur
f_grid_plant_soil_sdvwc <- plant_id_data_OF |> 
  filter(!is.na(habitat)) |>
  ggplot(aes(y = sd_stomatal_density, x = VWC.soil_0_15_cm.sd, color = species)) +
  geom_point(aes(shape = siteID), size = 3) + # Ajoute des points avec des formes différentes pour chaque espèce
  geom_smooth(aes(color = species), method = "lm") + # Ajoute des lignes de régression séparées pour chaque espèce
  facet_grid(. ~ species) + # Crée des facettes pour chaque site
  labs(y = "Stomatal Density sd (stomata / mm²)", x = "sd volumetric water content")

# Afficher le graphique
print(f_grid_plant_soil_sdvwc)

f_grid_plant_soil_Trange <- plant_id_data_OF |> 
  filter(!is.na(habitat)) |>
  ggplot(aes(y = mean_stomatal_density, x = T.soil_8_cm.drange, color = species)) +
  geom_point(aes(shape = siteID), size = 3) + # Ajoute des points avec des formes différentes pour chaque espèce
  geom_smooth(aes(color = species), method = "lm") + # Ajoute des lignes de régression séparées pour chaque espèce
  facet_grid(. ~ species) + # Crée des facettes pour chaque site
  labs(y = "Stomatal Density (stomata / mm²)", x = "Soil Temperature range (°C)")

# Afficher le graphique
print(f_grid_plant_soil_Trange)





f_grid_plant_air_T2cmrange<- plant_id_data_OF |> 
  filter(!is.na(habitat)) |>
  ggplot(aes(y = sd_stomatal_density, x = T.air_2_cm.drange, color = species)) +
  geom_point(aes(shape = siteID), size = 3) + # Ajoute des points avec des formes différentes pour chaque espèce
  geom_smooth(aes(color = species), method = "lm") + # Ajoute des lignes de régression séparées pour chaque espèce
  facet_grid(. ~ species) + # Crée des facettes pour chaque site
  labs(y = "Stomatal Density sd (stomata / mm²)", x = "2 cm Air Temperature range (°C)")

# Afficher le graphique
print(f_grid_plant_air_T2cmrange)



f_grid_plant_air_T15cmrange <- plant_id_data_OF |> 
  filter(!is.na(habitat)) |>
  ggplot(aes(y = sd_stomatal_density, x = T.air_15_cm.drange, color = species)) +
  geom_point(aes(shape = siteID), size = 3) + # Ajoute des points avec des formes différentes pour chaque espèce
  geom_smooth(aes(color = species), method = "lm") + # Ajoute des lignes de régression séparées pour chaque espèce
  facet_grid(. ~ species) + # Crée des facettes pour chaque site
  labs(y = "Stomatal Density sd (stomata / mm²)", x = "15 cm Air Temperature range (°C)")

print(f_grid_plant_air_T15cmrange)



f_grid_plant_soil_corvwc <- plant_id_data_OF |> 
  filter(!is.na(habitat)) |>
  ggplot() +
  geom_point(aes(y = mean_stomatal_density, x = VWC.soil_0_15_cm.mean, color = "VWC.soil_0_15_cm", shape = siteID), size = 3) +
 geom_smooth(aes(y = mean_stomatal_density, x = VWC.soil_0_15_cm.mean, color = "VWC.soil_0_15_cm"), method = "lm") +
  facet_grid(. ~ species) + # Crée des facettes pour chaque site
  labs(y = "Stomatal Density (stomata / mm²)", x = "volumetric water content")

print(f_grid_plant_soil_corvwc)

f_grid_plant_corT1 <- plant_id_data_OF |> 
  filter(!is.na(habitat)) |>
  ggplot() +
  geom_point(aes(y = mean_stomatal_density, x = T.air_15_cm.mean, color = "T.air_15_cm",shape = siteID), size = 3) +
  geom_smooth(aes(y = mean_stomatal_density, x = T.air_15_cm.mean, color = "T.air_15_cm"), method = "lm") +
 # geom_point(aes(x = mean_stomatal_density, y = T.air_2_cm.mean, color = "T.air_2_cm"), size = 3) +
 # geom_smooth(aes(x = mean_stomatal_density, y = T.air_2_cm.mean, color = "T.air_2_cm"), method = "lm") +
 # geom_point(aes(x = mean_stomatal_density, y = T.soil_8_cm.mean, color = "T.soil_8_cm"), size = 3) +
 # geom_smooth(aes(x = mean_stomatal_density, y = T.soil_8_cm.mean, color = "T.soil_8_cm"), method = "lm") +
  facet_grid(. ~ species) + # Crée des facettes pour chaque site
 labs(y = "Stomatal Density sd (stomata / mm²)", x = "Temperature(°C)",
       color = 'Source de Température')

print(f_grid_plant_corT1)

f_grid_plant_corT2 <- plant_id_data_OF |> 
  filter(!is.na(habitat)) |>
  ggplot() +
 geom_point(aes(y = mean_stomatal_density, x = T.air_2_cm.mean, color = "T.air_2_cm", shape = siteID), size = 3) +
 geom_smooth(aes(y = mean_stomatal_density, x = T.air_2_cm.mean, color = "T.air_2_cm"), method = "lm") +
 # geom_point(aes(x = mean_stomatal_density, y = T.soil_8_cm.mean, color = "T.soil_8_cm"), size = 3) +
 # geom_smooth(aes(x = mean_stomatal_density, y = T.soil_8_cm.mean, color = "T.soil_8_cm"), method = "lm") +
  facet_grid(. ~ species) + # Crée des facettes pour chaque site
 labs(y = "Stomatal Density sd (stomata / mm²)", x = "Temperature(°C)",
       color = 'Source de Température')

print(f_grid_plant_corT2)

f_grid_plant_corT3 <- plant_id_data_OF |> 
  filter(!is.na(habitat)) |>
  ggplot() +
 geom_point(aes(y = mean_stomatal_density, x = T.soil_8_cm.mean, color = "T.soil_8_cm", shape = siteID), size = 3) +
 geom_smooth(aes(y = mean_stomatal_density, x = T.soil_8_cm.mean, color = "T.soil_8_cm", fill = siteID), method = "lm") +
  facet_grid(. ~ species) + # Crée des facettes pour chaque site
 labs(x = "Temperature(°C)", y = "Stomatal Density sd (stomata / mm²)",
       color = 'Source de Température')

print(f_grid_plant_corT3)
```

## Statistical analysis

New

```{r}
library(lme4)
library(car)
library(multcomp)
library(emmeans)


# Convert variables to factors if necessary
SP_data_picture_OF$habitat <- as.factor(SP_data_picture_OF$habitat)
SP_data_picture_OF$siteID <- as.factor(SP_data_picture_OF$siteID)
SP_data_picture_OF$species <- as.factor(SP_data_picture_OF$species)
SP_data_picture_OF$leaf_id <- as.factor(SP_data_picture_OF$leaf_id)
SP_data_picture_OF$plant_id <- as.factor(SP_data_picture_OF$plant_id)

# Analysis by species

# Function to perform analysis by species

  data_species <- SP_data_picture_OF
  
  # Apply transformations to improve normality (if necessary)
  data_species$log_stomatal_density_p <- log(data_species$stomatal_density_p)
  data_species$log_mean_stomatal_area_um2_p <- log(data_species$mean_stomatal_area_um2_p)
  data_species$sqrt_stomatal_density_p <- sqrt(data_species$stomatal_density_p)
  data_species$sqrt_mean_stomatal_area_um2_p <- sqrt(data_species$mean_stomatal_area_um2_p)
  data_species$inv_stomatal_density_p <- 1/(data_species$stomatal_density_p)
  data_species$inv_mean_stomatal_area_um2_p <- 1/(data_species$mean_stomatal_area_um2_p)


  # ANOVA with interactions
  model1 <- lmer(sqrt_stomatal_density_p ~ habitat * siteID * species+
                (1 | siteID/plant_id/leaf_id) +
                (1 | plant_id), data = data_species)
  model2 <- lmer(inv_mean_stomatal_area_um2_p ~ habitat * siteID * species +
                (1 | siteID/plant_id/leaf_id) +
                (1 | plant_id), data = data_species)
  

  cat("**Stomatal density:**\n")
  print(shapiro.test(residuals(model1)))
  print(leveneTest(residuals(model1) ~ siteID, data = data_species))
  cat("**Mean stomatal area:**\n")
  print(shapiro.test(residuals(model2)))
  print(leveneTest(residuals(model2) ~ siteID, data = data_species))

  cat("**lmer results:**\n")
  cat("**Stomatal density:**\n")
  print(summary(model1, correlation=TRUE))
  cat("**Mean stomatal area:**\n")
  print(summary(model2, correlation=TRUE))

  # Correlations
  cat("**Correlations:**\n")
  print(cor(data_species[, c("log_stomatal_density_p", "mean_stomatal_area_um2_p")]))

```

```{r}
# Convert variables to factors if necessary
SP_data_picture_OF$habitat <- as.factor(SP_data_picture_OF$habitat)
SP_data_picture_OF$siteID <- as.factor(SP_data_picture_OF$siteID)
SP_data_picture_OF$species <- as.factor(SP_data_picture_OF$species)
SP_data_picture_OF$leaf_id <- as.factor(SP_data_picture_OF$leaf_id)
SP_data_picture_OF$plant_id <- as.factor(SP_data_picture_OF$plant_id)

# Analysis by species

# Function to perform analysis by species
  species = "VM"
  data_species <- SP_data_picture_OF[SP_data_picture_OF$species == species,]
  
  # Apply transformations to improve normality
  data_species$log_stomatal_density_p <- log(data_species$stomatal_density_p)
  data_species$log_mean_stomatal_area_um2_p <- log(data_species$mean_stomatal_area_um2_p)
  data_species$sqrt_stomatal_density_p <- sqrt(data_species$stomatal_density_p)
  data_species$sqrt_mean_stomatal_area_um2_p <- sqrt(data_species$mean_stomatal_area_um2_p)
  data_species$inv_stomatal_density_p <- 1/(data_species$stomatal_density_p)
  data_species$inv_mean_stomatal_area_um2_p <- 1/(data_species$mean_stomatal_area_um2_p)


  print(species)


  model1 <- lmer(sqrt_stomatal_density_p ~ siteID * habitat +
                (1 | siteID/plant_id/leaf_id) +
                (1 | plant_id), data = data_species)
  model2 <- lmer(log_mean_stomatal_area_um2_p ~siteID * habitat  +
                (1 | siteID/plant_id/leaf_id) +
                (1 | plant_id), data = data_species)
  
  cat("**Stomatal density:**\n")
  print(shapiro.test(residuals(model1)))
  print(leveneTest(residuals(model1) ~ siteID, data = data_species))
  cat("**Mean stomatal area:**\n")
  print(shapiro.test(residuals(model2)))
  print(leveneTest(residuals(model2) ~ siteID, data = data_species))


  cat("**lmer results:**\n")
  print(summary(model1))
  print(summary(model2))

cat("**post hoc test avec glht:**\n") 
glht_model1 <- glht(model1, linfct = mcp(siteID = "Tukey", habitat = "Tukey"))
print(summary(glht_model1))
glht_model2 <- glht(model2, linfct = mcp(siteID = "Tukey", habitat = "Tukey"))
print(summary(glht_model2))

cat("**post hoc test avec emms:**\n") 
cat("**Stomatal density**\n") 
emms1 <- emmeans(model1, ~ siteID * habitat)
print(summary(emms1))
print(pairs(emms1, adjust = "BH"))
cat("**Stomatal area**\n") 


  # Correlations
  cat("**Correlations:**\n")
  print(cor.test(data_species$stomatal_density_p, data_species$mean_stomatal_area_um2_p))


# Function to perform analysis by species
species = "VV"
  data_species <- SP_data_picture_OF[SP_data_picture_OF$species == species,]
  
  # Apply transformations to improve normality (if necessary)
  data_species$log_stomatal_density_p <- log(data_species$stomatal_density_p)
  data_species$log_mean_stomatal_area_um2_p <- log(data_species$mean_stomatal_area_um2_p)
  data_species$sqrt_stomatal_density_p <- sqrt(data_species$stomatal_density_p)
  data_species$sqrt_mean_stomatal_area_um2_p <- sqrt(data_species$mean_stomatal_area_um2_p)
  data_species$inv_stomatal_density_p <- 1/(data_species$stomatal_density_p)
  data_species$inv_mean_stomatal_area_um2_p <- 1/(data_species$mean_stomatal_area_um2_p)


  print(species)


  model3 <- lmer(stomatal_density_p ~ siteID * habitat +
                (1 | siteID/plant_id/leaf_id) +
                (1 | plant_id), data = data_species)
  model4 <- lmer(log_mean_stomatal_area_um2_p ~ siteID * habitat  +
                (1 | siteID/plant_id/leaf_id) +
                (1 | plant_id), data = data_species)
  
  cat("**Stomatal density:**\n")
  print(shapiro.test(residuals(model3)))
  print(leveneTest(residuals(model3) ~ siteID, data = data_species))
  cat("**Mean stomatal area:**\n")
  print(shapiro.test(residuals(model4)))
  print(leveneTest(residuals(model4) ~ siteID, data = data_species))


  cat("**lmer results:**\n")
  print(summary(model3))
  print(summary(model4))
 
cat("**post hoc test:**\n") 
glht_model3 <- glht(model3, linfct = mcp(siteID = "Tukey", habitat = "Tukey"))
print(summary(glht_model3))
glht_model4 <- glht(model4, linfct = mcp(siteID = "Tukey", habitat = "Tukey"))
print(summary(glht_model4))
  
cat("**post hoc test avec emms:**\n") 
cat("**Stomatal density:**\n") 
emms3 <- emmeans(model3, ~ siteID * habitat)
print(summary(emms3))
print(pairs(emms3, adjust = "BH"))
cat("**Stomatal area**\n") 
emms4 <- emmeans(model4, ~ siteID * habitat)
print(summary(emms4))
print(pairs(emms4, adjust = "BH"))

  # Correlations
  cat("**Correlations:**\n")
  print(cor.test(data_species$stomatal_density_p, data_species$mean_stomatal_area_um2_p))
  
```

plant

```{r}

# Convertir les variables en facteurs si nécessaire
plant_id_data_OF$habitat <- as.factor(plant_id_data_OF$habitat)
plant_id_data_OF$siteID <- as.factor(plant_id_data_OF$siteID)
plant_id_data_OF$species <- as.factor(plant_id_data_OF$species)



# Analyse par espèce

species <- "VM"
  data_species <- plant_id_data_OF[plant_id_data_OF$species == species,]
  data_species$log_mean_stomatal_density <- log(data_species$mean_stomatal_density)
  data_species$log_mean_stomatal_area_um2 <- log(data_species$mean_stomatal_area_um2)
  data_species$sqrt_mean_stomatal_density <- sqrt(data_species$mean_stomatal_density)
  data_species$sqrt_mean_stomatal_area_um2 <- sqrt(data_species$mean_stomatal_area_um2)
  
  print(species)

  # ANOVA avec interactions
  model1 <- aov(log_mean_stomatal_density ~ habitat * siteID, data = data_species)
  model2 <- aov(mean_stomatal_area_um2 ~ habitat * siteID, data = data_species)
  
  # Vérification de la normalité des résidus
  cat("**Espèce :**", species, "\n")
  cat("**Densité stomatique :**\n")
  shapiro.test(residuals(model1))
  cat("**Aire stomatique moyenne :**\n")
  shapiro.test(residuals(model2))

  # Post-hoc (si ANOVA significative)
  cat("**Résultats de l'ANOVA :**\n")
  print(summary(model1))
  print(summary(model2))
  if(summary(model1)[[1]]$Pr[1] < 0.05) {
    cat("Comparaison multiple pour la densité stomatique : \n")
    print(TukeyHSD(model1))
  }
  if(summary(model2)[[1]]$Pr[1] < 0.05) {
    cat("Comparaison multiple pour l'aire stomatique moyenne : \n")
    print(TukeyHSD(model2))
  }

  # Corrélations
  cat("**Corrélations clim :**\n")
  data_cor <- data_species |> 
    select(mean_stomatal_density, mean_stomatal_area_um2, sd_stomatal_density, sd_stomatal_area_um2, T.air_15_cm.mean, T.air_2_cm.mean, T.soil_8_cm.mean, VWC.soil_0_15_cm.mean, T.air_15_cm.drange, T.air_2_cm.drange, T.soil_8_cm.drange, VWC.soil_0_15_cm.sd)|> 
    filter(!is.na(sd_stomatal_density)) |> 
    filter(!is.na(T.air_15_cm.mean))
  cor_clim_VM <- (cor(data_cor))

     cat("**Corrélations leaf :**\n")
  data_cor <- data_species |> 
    select(mean_stomatal_density, mean_stomatal_area_um2, sd_stomatal_density, sd_stomatal_area_um2, T.air_15_cm.mean, T.air_2_cm.mean, T.soil_8_cm.mean, VWC.soil_0_15_cm.mean, T.air_15_cm.drange, T.air_2_cm.drange, T.soil_8_cm.drange, VWC.soil_0_15_cm.sd,
                               mean_leaf_area, mean_leaf_thickness, mean_leaf_wetmass) |>  
        filter(!is.na(sd_stomatal_density)) |> 
        filter(!is.na(T.air_15_cm.mean)) |> 
    filter(!is.nan(mean_leaf_area)) |> 
        filter(!is.nan(mean_leaf_thickness))
  cor_leaf_VM <- (cor(data_cor))

  
species <- "VV"
  data_species <- plant_id_data_OF[plant_id_data_OF$species == species,]
  data_species$log_mean_stomatal_density <- log(data_species$mean_stomatal_density)
  data_species$log_mean_stomatal_area_um2 <- log(data_species$mean_stomatal_area_um2)
  data_species$sqrt_mean_stomatal_density <- sqrt(data_species$mean_stomatal_density)
  data_species$sqrt_mean_stomatal_area_um2 <- sqrt(data_species$mean_stomatal_area_um2)
  
  print(species)

  # ANOVA avec interactions
  model1 <- aov(log_mean_stomatal_density ~ habitat * siteID, data = data_species)
  model2 <- aov(mean_stomatal_area_um2 ~ habitat * siteID, data = data_species)
  
  # Vérification de la normalité des résidus
  cat("**Espèce :**", species, "\n")
  cat("**Densité stomatique :**\n")
  shapiro.test(residuals(model1))
  cat("**Aire stomatique moyenne :**\n")
  shapiro.test(residuals(model2))

  # Post-hoc (si ANOVA significative)
  cat("**Résultats de l'ANOVA :**\n")
  print(summary(model1))
  print(summary(model2))
  if(summary(model1)[[1]]$Pr[1] < 0.05) {
    cat("Comparaison multiple pour la densité stomatique : \n")
    print(TukeyHSD(model1))
  }
  if(summary(model2)[[1]]$Pr[1] < 0.05) {
    cat("Comparaison multiple pour l'aire stomatique moyenne : \n")
    print(TukeyHSD(model2))
  }

  # Corrélations
  cat("**Corrélations clim :**\n")
  data_cor <- data_species |> 
    select(mean_stomatal_density, mean_stomatal_area_um2, sd_stomatal_density, sd_stomatal_area_um2, T.air_15_cm.mean, T.air_2_cm.mean, T.soil_8_cm.mean, VWC.soil_0_15_cm.mean, T.air_15_cm.drange, T.air_2_cm.drange, T.soil_8_cm.drange, VWC.soil_0_15_cm.sd)|> 
        filter(!is.na(sd_stomatal_density)) |> 
    filter(!is.na(T.air_15_cm.mean))
  cor_clim_VV <- (cor(data_cor))

    cat("**Corrélations leaf :**\n")
  data_cor <- data_species |> 
    select(mean_stomatal_density, mean_stomatal_area_um2, sd_stomatal_density, sd_stomatal_area_um2, T.air_15_cm.mean, T.air_2_cm.mean, T.soil_8_cm.mean, VWC.soil_0_15_cm.mean, T.air_15_cm.drange, T.air_2_cm.drange, T.soil_8_cm.drange, VWC.soil_0_15_cm.sd,
                               mean_leaf_area, mean_leaf_thickness, mean_leaf_wetmass) |> 
    filter(!is.na(sd_stomatal_density)) |> 
        filter(!is.na(T.air_15_cm.mean)) |> 
    filter(!is.nan(mean_leaf_area)) |> 
    filter(!is.nan(mean_leaf_thickness))

  
```

pvalues

```{r}

# Fonction pour calculer les p-values
get_pvalue <- function(x, y) {
  test <- cor.test(x, y)
  return(test$p.value)
}

species <- "VM"
  data_species <- plant_id_data_OF[plant_id_data_OF$species == species,]

data_cor <- data_species %>%
  select(mean_stomatal_density, mean_stomatal_area_um2, sd_stomatal_density, sd_stomatal_area_um2, 
         T.air_15_cm.mean, T.air_2_cm.mean, T.soil_8_cm.mean, VWC.soil_0_15_cm.mean, 
         T.air_15_cm.drange, T.air_2_cm.drange, T.soil_8_cm.drange, VWC.soil_0_15_cm.sd,
         mean_leaf_area, mean_leaf_thickness, mean_leaf_wetmass) %>%
  filter(!is.na(sd_stomatal_density)) %>%
  filter(!is.na(T.air_15_cm.mean)) %>%
  filter(!is.nan(mean_leaf_area)) %>%
  filter(!is.nan(mean_leaf_thickness))


# Matrice de corrélation
cor_matrix <- cor(data_cor)

# Matrice de p-values
p_value_matrix <- matrix(NA, nrow = ncol(data_cor), ncol = ncol(data_cor))
rownames(p_value_matrix) <- colnames(cor_matrix)
colnames(p_value_matrix) <- colnames(cor_matrix)

# Calculer les p-values
for (i in 1:(ncol(data_cor) - 1)) {
  for (j in (i + 1):ncol(data_cor)) {
    p_value_matrix[i, j] <- get_pvalue(data_cor[[i]], data_cor[[j]])
    p_value_matrix[j, i] <- p_value_matrix[i, j]  # Matrice symétrique
  }
}

# Convertir les matrices en data frames
cor_df <- as.data.frame(cor_matrix)
p_value_df <- as.data.frame(p_value_matrix)

# Combiner les coefficients de corrélation et les p-values
result_VM <- bind_rows(
  as_tibble(cor_df, rownames = "Variable") |> 
    pivot_longer(-Variable, names_to = "Variable_2", values_to = "Correlation") |> 
    mutate(Type = "Correlation"),
  as_tibble(p_value_df, rownames = "Variable") |> 
    pivot_longer(-Variable, names_to = "Variable_2", values_to = "P_value") |> 
    mutate(Type = "P-value")
) |> 
pivot_wider(names_from = Type, values_from = c(Correlation, P_value))

# Afficher le résultat
print(result_VM)

species <- "VV"
  data_species <- plant_id_data_OF[plant_id_data_OF$species == species,]

data_cor <- data_species %>%
  select(mean_stomatal_density, mean_stomatal_area_um2, sd_stomatal_density, sd_stomatal_area_um2, 
         T.air_15_cm.mean, T.air_2_cm.mean, T.soil_8_cm.mean, VWC.soil_0_15_cm.mean, 
         T.air_15_cm.drange, T.air_2_cm.drange, T.soil_8_cm.drange, VWC.soil_0_15_cm.sd,
         mean_leaf_area, mean_leaf_thickness, mean_leaf_wetmass) %>%
  filter(!is.na(sd_stomatal_density)) %>%
  filter(!is.na(T.air_15_cm.mean)) %>%
  filter(!is.nan(mean_leaf_area)) %>%
  filter(!is.nan(mean_leaf_thickness))


# Matrice de corrélation
cor_matrix <- cor(data_cor)

# Matrice de p-values
p_value_matrix <- matrix(NA, nrow = ncol(data_cor), ncol = ncol(data_cor))
rownames(p_value_matrix) <- colnames(cor_matrix)
colnames(p_value_matrix) <- colnames(cor_matrix)

# Calculer les p-values
for (i in 1:(ncol(data_cor) - 1)) {
  for (j in (i + 1):ncol(data_cor)) {
    p_value_matrix[i, j] <- get_pvalue(data_cor[[i]], data_cor[[j]])
    p_value_matrix[j, i] <- p_value_matrix[i, j]  # Matrice symétrique
  }
}

# Convertir les matrices en data frames
cor_df <- as.data.frame(cor_matrix)
p_value_df <- as.data.frame(p_value_matrix)

# Combiner les coefficients de corrélation et les p-values
result_VV <- bind_rows(
  as_tibble(cor_df, rownames = "Variable") |> 
    pivot_longer(-Variable, names_to = "Variable_2", values_to = "Correlation") |> 
    mutate(Type = "Correlation"),
  as_tibble(p_value_df, rownames = "Variable") |> 
    pivot_longer(-Variable, names_to = "Variable_2", values_to = "P_value") |> 
    mutate(Type = "P-value")
) |> 
pivot_wider(names_from = Type, values_from = c(Correlation, P_value))

# Afficher le résultat
print(result_VV)


```

old

Normality test

```{r}

# Comparaison intra-spécifique par habitat pour chaque espèce avec Kruskal-Wallis
for (species_i in unique(SP_data_picture_OF$species)) {
  for (site_i in unique(SP_data_picture_OF$siteID)) {
    subset_data <- SP_data_picture_OF|> 
      filter(species == species_i, siteID == site_i)
    kruskal_test <- kruskal.test(stomatal_density_p ~ habitat, data = subset_data)
    print(paste("Test de Kruskal-Wallis pour", species_i, "dans", site_i, ": p-value =", kruskal_test$p.value))
  }
}

```

comparaison en enlevant les espèces comme facteur

glm

```{r}

# Charger les librairies nécessaires
library(dplyr)
library(ggplot2)
library(tidyr)
library(multcomp)

# Conversion des colonnes en facteurs
SP_data_picture_OF$species <- as.factor(SP_data_picture_OF$species)
SP_data_picture_OF$habitat <- as.factor(SP_data_picture_OF$habitat)
SP_data_picture_OF$siteID <- as.factor(SP_data_picture_OF$siteID)

# Fonction pour analyser chaque espèce
analyze_species <- function(data, species_name) {
  # Filtrer les données pour l'espèce
  species_data <- filter(data, species == species_name)
  
  # Créer une variable d'interaction
  species_data$habitat_siteID <- interaction(species_data$habitat, species_data$siteID)
  
  # Modèle linéaire généralisé sans l'effet de l'espèce
  glm_model <- glm(stomatal_density_p ~ habitat * siteID, data = species_data)
  glm_summary <- summary(glm_model)
  print(paste("Résumé du modèle GLM pour l'espèce:", species_name))
  print(glm_summary)
  
  # Visualisation des interactions
  interaction_plot <- ggplot(species_data, aes(x = habitat, y = stomatal_density_p, color = siteID)) +
    geom_point(position = position_jitter(width = 0.2, height = 0)) +
    facet_wrap(~ siteID) +
    theme_minimal() +
    labs(title = paste("Interactions entre habitat et siteID sur la Densité stomatique pour l'espèce", species_name))
  print(interaction_plot)
  
  # ANOVA pour évaluer l'effet de l'habitat et du site sans inclure l'effet de l'espèce
  anova_model <- aov(stomatal_density_p ~ habitat * siteID, data = species_data)
  anova_summary <- summary(anova_model)
  print(paste("Résumé de l'ANOVA pour l'espèce:", species_name))
  print(anova_summary)
  
  # Tests post-hoc si l'ANOVA est significative
  if (anova_summary[[1]]$`Pr(>F)`[1] < 0.05 | anova_summary[[1]]$`Pr(>F)`[2] < 0.05 | anova_summary[[1]]$`Pr(>F)`[3] < 0.05) {
    posthoc_habitat <- glht(anova_model, linfct = mcp(habitat = "Tukey"))
    print(paste("Comparaisons post-hoc des habitats pour l'espèce:", species_name))
    print(summary(posthoc_habitat))
    
    posthoc_site <- glht(anova_model, linfct = mcp(siteID = "Tukey"))
    print(paste("Comparaisons post-hoc des sites pour l'espèce:", species_name))
    print(summary(posthoc_site))
    

  }
}

# Appliquer la fonction pour chaque espèce
unique_species <- unique(SP_data_picture_OF$species)
for (species_name in unique_species) {
  analyze_species(SP_data_picture_OF, species_name)
}

```
